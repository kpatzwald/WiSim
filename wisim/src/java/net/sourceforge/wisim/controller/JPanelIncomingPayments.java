/*   ********************************************************************   **
**   Copyright notice                                                       **
**                                                                          **
**   (c) 2003 WiSim Development Team					                              **
**   http://wisim.sourceforge.net/   			                                  **
**                                                                          **
**   All rights reserved                                                    **
**                                                                          **
**   This script is part of the WiSim Business Game project. The WiSim      **
**   project is free software; you can redistribute it and/or modify        **
**   it under the terms of the GNU General Public License as published by   **
**   the Free Software Foundation; either version 2 of the License, or      **
**   (at your option) any later version.                                    **
**                                                                          **
**   The GNU General Public License can be found at                         **
**   http://www.gnu.org/copyleft/gpl.html.                                  **
**   A copy is found in the textfile GPL.txt and important notices to the   **
**   license from the team is found in the textfile LICENSE.txt distributed **
**   in these package.                                                      **
**                                                                          **
**   This copyright notice MUST APPEAR in all copies of the file!           **
**   ********************************************************************   */

/*
 * JPanelZahlungseingang.java
 *
 * Created on 10. März 2003, 21:33
 */

package net.sourceforge.wisim.controller;
import java.util.*;
import net.sourceforge.wisim.model.*;
import net.sourceforge.wisim.dao.*;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.image.*;


/**
 * JPanelZahlungseingang ermöglicht Übersicht und Bearbeitung aller Zahlungseingänge.
 */

public class JPanelIncomingPayments extends javax.swing.JPanel {
    
    private WiSimDAO dao;
    private Vector rechnungsListe;
    private Hashtable vertragObjekte;  
    private Hashtable rechnungObjekte;     
    private Hashtable kundeObjekte;     
    private Collection etatPos;
    private int anzahl;
    private int posAnzahl;
    private double summe;
    private double skontoToCalc;
    private double lieferrabattToCalc;
    private Color darkgreen = new Color(51, 153, 51);
    private Color red = new Color(255, 0, 0);
    private Color orange = new Color(255, 153, 0);
    private int positionen;
    private boolean isActive;
    private boolean isBuilt;
    private WiSimMainController wiSimMainController;
    
    /** Creates new form JPanelZahlungseingang
     * @param wiSimMainController Der WiSimMainController
     */
    public JPanelIncomingPayments(WiSimMainController wiSimMainController) {
        this.wiSimMainController = wiSimMainController;
        initDAO(wiSimMainController);
        vertragObjekte = new Hashtable();
        rechnungObjekte = new Hashtable();
        kundeObjekte = new Hashtable();
        rechnungsListe = new Vector();
        etatPos = new Vector();
        anzahl = 0;
        posAnzahl = 0;
        summe = 0;
        skontoToCalc = 0;
        lieferrabattToCalc = 0;
        isActive = false;
        isBuilt = false;
        initComponents();
    }
    
    private void initDAO(WiSimMainController wiSimMainController) {
        dao = wiSimMainController.getDAO();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jLabelEtatEinsehen = new javax.swing.JLabel();
        jScrollPaneRechnungListe = new javax.swing.JScrollPane();
        jTableRechnungListe = new javax.swing.JTable();
        jTableRechnungListe.setSelectionMode(0);
        jTableRechnungListe.getTableHeader().setReorderingAllowed(false);

        jPanelLegende = new javax.swing.JPanel();
        jLabelGruen = new javax.swing.JLabel();
        jLabelRot = new javax.swing.JLabel();
        jPanelLegende1 = new javax.swing.JPanel();
        jTextFieldRabatt = new javax.swing.JTextField();
        jTextFieldPreis = new javax.swing.JTextField();
        jTextFieldSkonto = new javax.swing.JTextField();
        jLabelAngebotspreis1 = new javax.swing.JLabel();
        jLabelMenge = new javax.swing.JLabel();
        jLabelEUR2 = new javax.swing.JLabel();
        jLabelArtikel = new javax.swing.JLabel();
        jButtonSpeichern = new javax.swing.JButton();
        jLabelArtikel1 = new javax.swing.JLabel();
        jTextFieldAuftragsdatum = new javax.swing.JTextField();
        jLabelArtikel2 = new javax.swing.JLabel();
        jTextFieldLieferdatum = new javax.swing.JTextField();
        jLabelArtikel3 = new javax.swing.JLabel();
        jTextFieldKunde = new javax.swing.JTextField();
        jTextFieldNr = new javax.swing.JTextField();
        jLabelArtikel4 = new javax.swing.JLabel();
        jTextFieldFirma = new javax.swing.JTextField();
        jLabelArtikel5 = new javax.swing.JLabel();
        jLabelEUR3 = new javax.swing.JLabel();
        jLabelEUR4 = new javax.swing.JLabel();
        jButtonReset = new javax.swing.JButton();

        setLayout(null);

        addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                formAncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
                formAncestorRemoved(evt);
            }
        });

        jLabelEtatEinsehen.setFont(new java.awt.Font("Dialog", 1, 24));
        jLabelEtatEinsehen.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelEtatEinsehen.setText("Zahlungseingang");
        add(jLabelEtatEinsehen);
        jLabelEtatEinsehen.setBounds(150, 10, 550, 32);

        jTableRechnungListe.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nr", "Name, Vorname", "Lieferung", "Zahlung"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableRechnungListe.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                jTableRechnungListeAncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        jTableRechnungListe.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableRechnungListeMouseClicked(evt);
            }
        });

        jScrollPaneRechnungListe.setViewportView(jTableRechnungListe);

        add(jScrollPaneRechnungListe);
        jScrollPaneRechnungListe.setBounds(10, 90, 380, 320);

        jPanelLegende.setLayout(null);

        jPanelLegende.setBorder(new javax.swing.border.TitledBorder("Legende"));
        jLabelGruen.setText("erfolgt");
        jPanelLegende.add(jLabelGruen);
        jLabelGruen.setBounds(10, 20, 180, 16);

        jLabelRot.setText("noch nicht erfolgt");
        jPanelLegende.add(jLabelRot);
        jLabelRot.setBounds(10, 50, 290, 16);

        add(jPanelLegende);
        jPanelLegende.setBounds(10, 430, 270, 80);

        jPanelLegende1.setLayout(null);

        jPanelLegende1.setBorder(new javax.swing.border.TitledBorder("Zahlung"));
        jTextFieldRabatt.setEditable(false);
        jTextFieldRabatt.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        jTextFieldRabatt.setBorder(null);
        jPanelLegende1.add(jTextFieldRabatt);
        jTextFieldRabatt.setBounds(130, 130, 80, 20);

        jTextFieldPreis.setEditable(false);
        jTextFieldPreis.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        jTextFieldPreis.setBorder(null);
        jPanelLegende1.add(jTextFieldPreis);
        jTextFieldPreis.setBounds(130, 190, 80, 20);

        jTextFieldSkonto.setEditable(false);
        jTextFieldSkonto.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        jTextFieldSkonto.setBorder(null);
        jPanelLegende1.add(jTextFieldSkonto);
        jTextFieldSkonto.setBounds(130, 160, 80, 20);

        jLabelAngebotspreis1.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabelAngebotspreis1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabelAngebotspreis1.setText("Gesamtpreis");
        jPanelLegende1.add(jLabelAngebotspreis1);
        jLabelAngebotspreis1.setBounds(30, 190, 80, 16);

        jLabelMenge.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabelMenge.setText("Skonto");
        jPanelLegende1.add(jLabelMenge);
        jLabelMenge.setBounds(30, 160, 60, 16);

        jLabelEUR2.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabelEUR2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelEUR2.setText("\u20ac");
        jLabelEUR2.setMaximumSize(new java.awt.Dimension(9, 22));
        jLabelEUR2.setMinimumSize(new java.awt.Dimension(9, 22));
        jLabelEUR2.setPreferredSize(new java.awt.Dimension(9, 22));
        jPanelLegende1.add(jLabelEUR2);
        jLabelEUR2.setBounds(220, 190, 10, 22);

        jLabelArtikel.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabelArtikel.setText("Rabatt");
        jPanelLegende1.add(jLabelArtikel);
        jLabelArtikel.setBounds(30, 130, 60, 16);

        jButtonSpeichern.setText("Zahlung erfolgt");
        jButtonSpeichern.setEnabled(false);
        jButtonSpeichern.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSpeichernActionPerformed(evt);
            }
        });

        jPanelLegende1.add(jButtonSpeichern);
        jButtonSpeichern.setBounds(30, 360, 160, 26);

        jLabelArtikel1.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabelArtikel1.setText("Auftragsdatum");
        jPanelLegende1.add(jLabelArtikel1);
        jLabelArtikel1.setBounds(30, 250, 80, 16);

        jTextFieldAuftragsdatum.setEditable(false);
        jTextFieldAuftragsdatum.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        jTextFieldAuftragsdatum.setBorder(null);
        jPanelLegende1.add(jTextFieldAuftragsdatum);
        jTextFieldAuftragsdatum.setBounds(130, 250, 120, 20);

        jLabelArtikel2.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabelArtikel2.setText("Lieferdatum");
        jPanelLegende1.add(jLabelArtikel2);
        jLabelArtikel2.setBounds(30, 280, 66, 16);

        jTextFieldLieferdatum.setEditable(false);
        jTextFieldLieferdatum.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        jTextFieldLieferdatum.setBorder(null);
        jPanelLegende1.add(jTextFieldLieferdatum);
        jTextFieldLieferdatum.setBounds(130, 280, 120, 20);

        jLabelArtikel3.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabelArtikel3.setText("Kunde");
        jPanelLegende1.add(jLabelArtikel3);
        jLabelArtikel3.setBounds(30, 70, 36, 16);

        jTextFieldKunde.setEditable(false);
        jTextFieldKunde.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        jTextFieldKunde.setBorder(null);
        jPanelLegende1.add(jTextFieldKunde);
        jTextFieldKunde.setBounds(130, 70, 180, 20);

        jTextFieldNr.setEditable(false);
        jTextFieldNr.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        jTextFieldNr.setBorder(null);
        jPanelLegende1.add(jTextFieldNr);
        jTextFieldNr.setBounds(130, 40, 80, 20);

        jLabelArtikel4.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabelArtikel4.setText("Nr");
        jPanelLegende1.add(jLabelArtikel4);
        jLabelArtikel4.setBounds(30, 40, 13, 16);

        jTextFieldFirma.setEditable(false);
        jTextFieldFirma.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        jTextFieldFirma.setBorder(null);
        jPanelLegende1.add(jTextFieldFirma);
        jTextFieldFirma.setBounds(130, 100, 180, 20);

        jLabelArtikel5.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabelArtikel5.setText("Firma");
        jPanelLegende1.add(jLabelArtikel5);
        jLabelArtikel5.setBounds(30, 100, 32, 16);

        jLabelEUR3.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabelEUR3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelEUR3.setText("%");
        jLabelEUR3.setMaximumSize(new java.awt.Dimension(9, 22));
        jLabelEUR3.setMinimumSize(new java.awt.Dimension(9, 22));
        jLabelEUR3.setPreferredSize(new java.awt.Dimension(9, 22));
        jPanelLegende1.add(jLabelEUR3);
        jLabelEUR3.setBounds(220, 160, 20, 22);

        jLabelEUR4.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabelEUR4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelEUR4.setText("%");
        jLabelEUR4.setMaximumSize(new java.awt.Dimension(9, 22));
        jLabelEUR4.setMinimumSize(new java.awt.Dimension(9, 22));
        jLabelEUR4.setPreferredSize(new java.awt.Dimension(9, 22));
        jPanelLegende1.add(jLabelEUR4);
        jLabelEUR4.setBounds(220, 130, 20, 22);

        jButtonReset.setText("R\u00fcckg\u00e4ngig");
        jButtonReset.setEnabled(false);
        jButtonReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonResetActionPerformed(evt);
            }
        });

        jPanelLegende1.add(jButtonReset);
        jButtonReset.setBounds(210, 360, 110, 26);

        add(jPanelLegende1);
        jPanelLegende1.setBounds(420, 90, 340, 420);

    }//GEN-END:initComponents

    private void formAncestorRemoved(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_formAncestorRemoved
        setIsActive(false);
    }//GEN-LAST:event_formAncestorRemoved

    private void formAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_formAncestorAdded
        setIsActive(true);
    }//GEN-LAST:event_formAncestorAdded

    private void jButtonResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonResetActionPerformed
        int auswahl = getSelVertragsID();
        if (auswahl != 0){
           boolean i = false;
           aendereEingang(getSelVertragsID(),i);
           setzeStandard();
        }
    }//GEN-LAST:event_jButtonResetActionPerformed

    private void jButtonSpeichernActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSpeichernActionPerformed
        int auswahl = getSelVertragsID();
        if (auswahl != 0){
           boolean i = true;
           aendereEingang(getSelVertragsID(),i);
           setzeStandard();
        }
    }//GEN-LAST:event_jButtonSpeichernActionPerformed

    private void jTableRechnungListeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableRechnungListeMouseClicked
        ladeKunde();
    }//GEN-LAST:event_jTableRechnungListeMouseClicked
        
    private void jTableRechnungListeAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_jTableRechnungListeAncestorAdded
        setzeStandard();
        ladeRechnungen();
        showLegende();
        setIsBuilt(true);
    }//GEN-LAST:event_jTableRechnungListeAncestorAdded
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonReset;
    private javax.swing.JButton jButtonSpeichern;
    private javax.swing.JLabel jLabelAngebotspreis1;
    private javax.swing.JLabel jLabelArtikel;
    private javax.swing.JLabel jLabelArtikel1;
    private javax.swing.JLabel jLabelArtikel2;
    private javax.swing.JLabel jLabelArtikel3;
    private javax.swing.JLabel jLabelArtikel4;
    private javax.swing.JLabel jLabelArtikel5;
    private javax.swing.JLabel jLabelEUR2;
    private javax.swing.JLabel jLabelEUR3;
    private javax.swing.JLabel jLabelEUR4;
    private javax.swing.JLabel jLabelEtatEinsehen;
    private javax.swing.JLabel jLabelGruen;
    private javax.swing.JLabel jLabelMenge;
    private javax.swing.JLabel jLabelRot;
    private javax.swing.JPanel jPanelLegende;
    private javax.swing.JPanel jPanelLegende1;
    private javax.swing.JScrollPane jScrollPaneRechnungListe;
    private javax.swing.JTable jTableRechnungListe;
    private javax.swing.JTextField jTextFieldAuftragsdatum;
    private javax.swing.JTextField jTextFieldFirma;
    private javax.swing.JTextField jTextFieldKunde;
    private javax.swing.JTextField jTextFieldLieferdatum;
    private javax.swing.JTextField jTextFieldNr;
    private javax.swing.JTextField jTextFieldPreis;
    private javax.swing.JTextField jTextFieldRabatt;
    private javax.swing.JTextField jTextFieldSkonto;
    // End of variables declaration//GEN-END:variables
    
    /** Füllt die Tabelle mit den in der DB vorhadenen Rechnungen */    
    public void ladeRechnungen() {
     try {
        Collection Vertraege = null;
        Vertraege = dao.getVertraege();
        Iterator it_Vertrag = Vertraege.iterator();
       
        positionen = 0;
        int i=0;
        anzahl = Vertraege.size();
        setTabelle();
        
        while (it_Vertrag.hasNext()) {
            Contract vertragsliste = (Contract) it_Vertrag.next();
            ContractAccount Auftrag = new ContractAccount();
            Auftrag = dao.getAuftragsrechnung(vertragsliste.getAuftragsrechnungsId());
            Customer Kunde = new Customer();
            Kunde = dao.getKunde(vertragsliste.getKundenId());
           
            jTableRechnungListe.setValueAt(String.valueOf(Auftrag.getAuftragNr()), i, 0);
            jTableRechnungListe.setValueAt(Kunde.getNachname()+ ", "+ Kunde.getVorname(), i, 1);
                                   
            if (vergleicheDatum(wiSimMainController.getActDate(),vertragsliste.getLieferdatum()) <= 0){ 
                Image imageIconGreen = new BufferedImage(28, 30, 2);
                Graphics g = imageIconGreen.getGraphics();
                g.setColor(darkgreen);
                g.fillRoundRect(10,11, 10, 10, 3, 3);
                ImageIcon ic = new ImageIcon(imageIconGreen);
                jTableRechnungListe.setValueAt(ic, i, 2);
                
            }else
            {
                Image imageIconRed = new BufferedImage(28, 30, 2);
                Graphics g = imageIconRed.getGraphics();
                g = imageIconRed.getGraphics();
                g.setColor(red);
                g.fillRoundRect(10,11, 10, 10, 3, 3);
                ImageIcon ic = new ImageIcon(imageIconRed);
                jTableRechnungListe.setValueAt(ic, i, 2);
            }
          
            if (Auftrag.getzEingang()){
                Image imageIconGreen = new BufferedImage(28, 30, 2);
                Graphics g = imageIconGreen.getGraphics();
                g.setColor(darkgreen);
                g.fillRoundRect(10,11, 10, 10, 3, 3);
                ImageIcon is = new ImageIcon(imageIconGreen);
                jTableRechnungListe.setValueAt(is, i, 3);
                
            }else
            {
                Image imageIconRed = new BufferedImage(28, 30, 2);
                Graphics g = imageIconRed.getGraphics();
                g = imageIconRed.getGraphics();
                g.setColor(red);
                g.fillRoundRect(10,11, 10, 10, 3, 3);
                ImageIcon is = new ImageIcon(imageIconRed);
                jTableRechnungListe.setValueAt(is, i, 3);
            }
        
            vertragObjekte.put(String.valueOf(i),vertragsliste);
            rechnungObjekte.put(String.valueOf(i),Auftrag);
            kundeObjekte.put(String.valueOf(i),Kunde);
            i++;
        }
    } catch (WiSimDAOException e) {
            System.err.println(e.getMessage());
    }
}
   
    
//Lädt einen Kunden zum Bearbeiten aus der Datenbank
 private void ladeKunde() {
      
     //liefert listItem des selektierten Eintrags
    String listItem = String.valueOf(jTableRechnungListe.getSelectedRow());
    Contract auswahlVertrag = (Contract)vertragObjekte.get(listItem);
    ContractAccount auswahlRechnung = (ContractAccount)rechnungObjekte.get(listItem);
    Customer auswahlKunde = (Customer)kundeObjekte.get(listItem);
    
    if (auswahlVertrag != null){   
        jTextFieldKunde.setText(auswahlKunde.getNachname()+ ", "+ auswahlKunde.getVorname());
        jTextFieldFirma.setText(auswahlKunde.getFirma());
        jTextFieldRabatt.setText(String.valueOf(auswahlVertrag.getRabatt()));
        jTextFieldSkonto.setText(String.valueOf(auswahlVertrag.getSkonto()));
        jTextFieldPreis.setText(String.valueOf(auswahlRechnung.getBetrag()));
        jTextFieldAuftragsdatum.setText(String.valueOf(formatDate(auswahlVertrag.getVertragsdatum())));
        jTextFieldLieferdatum.setText(String.valueOf(formatDate(auswahlVertrag.getLieferdatum())));
        jTextFieldNr.setText(String.valueOf(auswahlRechnung.getNr()));
    }
    
    if (vergleicheDatum(wiSimMainController.getActDate(),auswahlVertrag.getLieferdatum()) <= 0){
       if (auswahlRechnung.getzEingang()){
            jButtonSpeichern.setEnabled(false);
            jButtonReset.setEnabled(true);   
        }else{ 
            jButtonSpeichern.setEnabled(true);
            jButtonReset.setEnabled(false);}
    }else{
       jButtonSpeichern.setEnabled(false);
       jButtonReset.setEnabled(false);   
    }

    
}
 
//Setzt Rechnungsstatus auf bezahlt
  private void aendereEingang(int Id, boolean i){
          try{
              dao.aendereAuftragsrechnung(Id,i);
              ladeRechnungen();
          } catch (WiSimDAOException e) {
                   System.err.println("Fehler: " + e.getMessage());
            } catch (WiSimDAOWriteException e) {
                     System.err.println("Fehler: " + e.getMessage());
              }
  }     
 
 
    /** Formatiert ein Date Objekt zu einem String TT.MM.JJJJ.
     * @param dateToFormat Das zu formatierende Datum.
     * @return Das formatierte Datum.
     */
    public String formatDate(java.sql.Date dateToFormat) {
        String date = String.valueOf(dateToFormat);
        String year = date.substring(0,4);
        String month = date.substring(5,7);
        String day = date.substring(8,10);
        String formattedDate = day + "." + month + "." + year;
        return formattedDate;
    }
    
    /** Vergleicht Lieferdatum mit aktuellen Datum
     * @param one Datum aus der DB
     * @param two dynamisches Datum
     * @return int
     */
    public int vergleicheDatum(Date one, Date two) {
        //umwandeln in UtilDate
        one = new java.util.Date(one.getTime());
        two = new java.util.Date(two.getTime());
        int controll = two.compareTo(one);
        return controll;
    }
    /** Zeigt die Legende an */
    public void showLegende() {
        //Legende
        Image imageIconGreen = new BufferedImage(28, 30, 2);
        Graphics g = imageIconGreen.getGraphics();
        g.setColor(darkgreen);
        g.fillRoundRect(10,11, 10, 10, 3, 3);
        ImageIcon ic = new ImageIcon(imageIconGreen);
        jLabelGruen.setIcon(ic);
        
        Image imageIconRed = new BufferedImage(28, 30, 2);
        g = imageIconRed.getGraphics();
        g.setColor(red);
        g.fillRoundRect(10,11, 10, 10, 3, 3);
        ic = new ImageIcon(imageIconRed);
        jLabelRot.setIcon(ic);
    }
    
    /** Erstellt die Tabelle. */
    public void setTabelle() {

        Object[][] tableInit = new Object[anzahl][4];
        DefaultTableModel defTable = new DefaultTableModel(
        tableInit,
        new String [] {
            "Nr", "Name, Vorname", "Lieferung", "Zahlung"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
            public Class getColumnClass(int c) {
                return getValueAt(0, c).getClass();
            }
        };
        jTableRechnungListe.setModel(defTable);
        jTableRechnungListe.setFocusable(false);
        jTableRechnungListe.getTableHeader().setReorderingAllowed(false);
        
        javax.swing.table.TableColumn column = null;
        
        //Spaltenbreiten der Tabelle werden gesetzt
        for (int i = 0; i < 4; i++) {
            column = jTableRechnungListe.getColumnModel().getColumn(i);
            switch (i) {
                    //Nr
                case 0:
                    column.setPreferredWidth(30);
                    break;
                    //Name
                case 1:
                    column.setPreferredWidth(150);
                    break;
                    //Lieferung
                case 2:
                    column.setPreferredWidth(40);
                    break;                   
                    //Zahlung
                case 3:
                    column.setPreferredWidth(40);
                    break;

            }
        }
        jTableRechnungListe.setDefaultRenderer( JComponent.class, new JComponentCellRenderer());
        jTableRechnungListe.setDefaultEditor( JComponent.class, new JComponentCellEditor());
    }    
  
    /** Liefert die KD_Nr des aktiven Kunden
   * @return int
   */  
    private int getSelVertragsID(){
    //liefert listItem des selektierten Eintrags
    String listItem = String.valueOf(jTableRechnungListe.getSelectedRow());   
    //sucht das aktive KundenObjekt in Hashtabelle kundenObjekte
    Contract auswahl = (Contract)vertragObjekte.get(listItem);
        if (auswahl != null){ 
            return auswahl.getAuftragsrechnungsId();
        }else return 0;
    }
    
    // Setzt nach dem Speichern und Löschen eines Lieferanten die Werte auf Standard^   
    private void setzeStandard() {
        jTextFieldKunde.setText("");
        jTextFieldFirma.setText("");
        jTextFieldRabatt.setText("");
        jTextFieldSkonto.setText("");
        jTextFieldPreis.setText("");
        jTextFieldAuftragsdatum.setText("");
        jTextFieldLieferdatum.setText("");
        jTextFieldNr.setText("");
        jButtonReset.setEnabled(false);
        jButtonSpeichern.setEnabled(false);
    }

     /** Refreshed Tabelle */
    public void refreshTabelle() {
        if (jTableRechnungListe.getSelectedRow() >= 0) {
            Collection Vertraege = null;
            try {
                Vertraege = dao.getVertraege();
            } catch (WiSimDAOException e) {
            }
            anzahl = Vertraege.size();
            int i = 0;
            if (anzahl > 0) {
                
                Iterator it_Vertrag = Vertraege.iterator();
                
                while (it_Vertrag.hasNext()) {
                    Contract vertragsliste = (Contract) it_Vertrag.next();
                                                            
                    if (vergleicheDatum(wiSimMainController.getActDate(),vertragsliste.getLieferdatum()) <= 0){ 
                        Image imageIconGreen = new BufferedImage(28, 30, 2);
                        Graphics g = imageIconGreen.getGraphics();
                        g.setColor(darkgreen);
                        g.fillRoundRect(10,11, 10, 10, 3, 3);
                        ImageIcon ic = new ImageIcon(imageIconGreen);
                        jTableRechnungListe.setValueAt(ic, i, 2);
                
                    }else
                    {
                        Image imageIconRed = new BufferedImage(28, 30, 2);
                        Graphics g = imageIconRed.getGraphics();
                        g = imageIconRed.getGraphics();
                        g.setColor(red);
                        g.fillRoundRect(10,11, 10, 10, 3, 3);
                        ImageIcon ic = new ImageIcon(imageIconRed);
                        jTableRechnungListe.setValueAt(ic, i, 2);
                    }
                    i++;
                }
            } 
        }
    }
    
    /** Setzt die Variable isBuilt
     * @param isBuilt
     */
	public void setIsBuilt(boolean isBuilt) {
		this.isBuilt = isBuilt;
	}

	/** Wurde das Pane schon einmal aufgebaut, so ist "isBuilt" = TRUE.
         *  Wichtig ist diese Variable für die Simulation: Wurde das Pane
         *  schon einmal aufgebaut, so müssen die Simulationsthread das Pane
         *  nicht noch einmal initialisieren!
         * @return boolean
         */
	public boolean getIsBuilt() {
		return isBuilt;
	}

	/** Setzt die Variable isActive auf TRUE oder FALSE
	 * @param isActive
	 */
	public void setIsActive(boolean isActive) {
		this.isActive = isActive;
	}

	/** Befindet sich der Benutzer auf diesem Pane, so ist "isActive" = TRUE.
         *  Verlässt der Benutzer das Pane, so ist "isActive" = FALSE.
         *  Wichtig ist diese Variable für die Simulation: Es wird nur das Pane
         *  aktualisiert, auf dem sich der Benutzer gerade befindet!
         * @return boolean
         */
	public boolean getIsActive() {
		return isActive;
	}
}
