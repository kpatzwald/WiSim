/*
 * JPanelLieferantBearbeiten.java
 *
 * Created on 10. Februar 2003, 21:06
 */

package net.sourceforge.wisim.controller;

import net.sourceforge.wisim.dao.*;
import net.sourceforge.wisim.model.*;
import javax.swing.*;
import java.util.*;
import javax.swing.table.DefaultTableModel;

/**
 * JPanelLieferantBearbeiten ermöglicht das bearbeiten eines Lieferanten.
 * @author Janett Ziola
 */
public class JPanelLieferantBearbeiten extends javax.swing.JPanel {
	private static final int HUB = 26;
  private WiSimDAO dao;
  private Vector alleArtikel;
  private Vector listeArtikel;
  private Vector einzelteile;
  private Hashtable lieferantenObjekte;  
  private Hashtable lieferantenAuswahl;
  private Hashtable zubehoerTabelle;
  private Hashtable einzelteileTabelle;
  private int position;
  //Logger
  private WiSimLogger wiSimLogger;
  
  /** Creates new form JPanelLieferantBearbeiten
     * @param wiSimMainController Der Maincontroller
     */
  
  public JPanelLieferantBearbeiten(WiSimMainController wiSimMainController) {
        wiSimLogger = wiSimMainController.getWiSimLogger();  
        initComponents();
        initDAO(wiSimMainController);
        zubehoerTabelle = new Hashtable();
        einzelteileTabelle = new Hashtable();
        lieferantenAuswahl = new Hashtable();
        lieferantenObjekte = new Hashtable();
        einzelteile = new Vector();
        alleArtikel = new Vector();
        listeArtikel = new Vector();
        listeArtikel.add("Bitte wählen");
  }
  
  private void initDAO(WiSimMainController wiSimMainController) {
    dao = wiSimMainController.getDAO();
  }  
  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
    private void initComponents() {//GEN-BEGIN:initComponents
        jLabelArtikelName1 = new javax.swing.JLabel();
        jLabelArtikelPreis1 = new javax.swing.JLabel();
        jTextFieldLieferantBearbeitenArtikelPreis = new javax.swing.JTextField();
        jButtonLieferantBearbeitenArtikelHinzufuegen = new javax.swing.JButton();
        jButtonLieferantBearbeitenArtikelEntfernen = new javax.swing.JButton();
        jLabelMindestAbnahme3 = new javax.swing.JLabel();
        jTextFieldLieferantBearbeitenMindestAbnahme = new javax.swing.JTextField();
        jButtonLieferantenAnlegen1 = new javax.swing.JButton();
        jComboBoxLieferantBearbeiten = new javax.swing.JComboBox();
        jButtonLieferantenAnlegen2 = new javax.swing.JButton();
        jLabelNeuerLieferantName = new javax.swing.JLabel();
        jTextFieldNeuerLieferantName = new javax.swing.JTextField();
        jLabelNeuerLieferantVorname = new javax.swing.JLabel();
        jTextFieldNeuerLieferantVorname = new javax.swing.JTextField();
        jTextFieldNeuerLieferantStrasse = new javax.swing.JTextField();
        jLabelNeuerLieferantStrasse = new javax.swing.JLabel();
        jTextFieldNeuerLieferantFirma = new javax.swing.JTextField();
        jLabelLieferantenFirma = new javax.swing.JLabel();
        jLabelNeuerLieferantOrt = new javax.swing.JLabel();
        jTextFieldNeuerLieferantOrt = new javax.swing.JTextField();
        jLabelNeuerLieferantPLZ = new javax.swing.JLabel();
        jTextFieldNeuerLieferantPLZ = new javax.swing.JTextField();
        jTextFieldNeuerLieferantFax = new javax.swing.JTextField();
        jLabelNeuerLieferantFax = new javax.swing.JLabel();
        jTextFieldNeuerLieferantTelefon = new javax.swing.JTextField();
        jLabelNeuerLieferantTelefon = new javax.swing.JLabel();
        jLabelNeuerLieferantEMail = new javax.swing.JLabel();
        jTextFieldNeuerLieferantEMail = new javax.swing.JTextField();
        jLabelNeuerLieferantLieferqualitaet = new javax.swing.JLabel();
        jComboBoxNeuerLieferantLieferqualitaet = new javax.swing.JComboBox();
        jComboBoxNeuerLieferantZuverlaessigkeit = new javax.swing.JComboBox();
        jLabelNeuerLieferantZuverlaessigkeit = new javax.swing.JLabel();
        jComboBoxNeuerLieferantArtikel = new javax.swing.JComboBox();
        jScrollPanePositionen = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jTable1.setSelectionMode(0);
        jTable1.getTableHeader().setReorderingAllowed(false);
        jLabelNeuerLieferantLieferqualitaet1 = new javax.swing.JLabel();
        jLabelNeuerLieferantLieferqualitaet2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabelLieferantBearbeitenUeberschrift = new javax.swing.JLabel();

        setLayout(null);

        jLabelArtikelName1.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabelArtikelName1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabelArtikelName1.setText("Artikelname");
        add(jLabelArtikelName1);
        jLabelArtikelName1.setBounds(20, 330, 120, 20);

        jLabelArtikelPreis1.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabelArtikelPreis1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabelArtikelPreis1.setText("Artikelpreis");
        add(jLabelArtikelPreis1);
        jLabelArtikelPreis1.setBounds(20, 370, 120, 20);

        jTextFieldLieferantBearbeitenArtikelPreis.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldLieferantBearbeitenArtikelPreisFocusLost(evt);
            }
        });

        add(jTextFieldLieferantBearbeitenArtikelPreis);
        jTextFieldLieferantBearbeitenArtikelPreis.setBounds(130, 370, 190, 20);

        jButtonLieferantBearbeitenArtikelHinzufuegen.setFont(new java.awt.Font("Dialog", 0, 10));
        jButtonLieferantBearbeitenArtikelHinzufuegen.setText(">>");
        jButtonLieferantBearbeitenArtikelHinzufuegen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLieferantBearbeitenArtikelHinzufuegenActionPerformed(evt);
            }
        });

        add(jButtonLieferantBearbeitenArtikelHinzufuegen);
        jButtonLieferantBearbeitenArtikelHinzufuegen.setBounds(340, 340, 60, 24);

        jButtonLieferantBearbeitenArtikelEntfernen.setFont(new java.awt.Font("Dialog", 0, 10));
        jButtonLieferantBearbeitenArtikelEntfernen.setText("ENTF");
        jButtonLieferantBearbeitenArtikelEntfernen.setMargin(new java.awt.Insets(2, 10, 2, 10));
        jButtonLieferantBearbeitenArtikelEntfernen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLieferantBearbeitenArtikelEntfernenActionPerformed(evt);
            }
        });

        add(jButtonLieferantBearbeitenArtikelEntfernen);
        jButtonLieferantBearbeitenArtikelEntfernen.setBounds(340, 390, 60, 24);

        jLabelMindestAbnahme3.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabelMindestAbnahme3.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabelMindestAbnahme3.setText("Mindestabnahme");
        add(jLabelMindestAbnahme3);
        jLabelMindestAbnahme3.setBounds(20, 400, 130, 20);

        jTextFieldLieferantBearbeitenMindestAbnahme.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldLieferantBearbeitenMindestAbnahmeFocusLost(evt);
            }
        });

        add(jTextFieldLieferantBearbeitenMindestAbnahme);
        jTextFieldLieferantBearbeitenMindestAbnahme.setBounds(130, 400, 190, 20);

        jButtonLieferantenAnlegen1.setText("\u00c4nderungen speichern");
        jButtonLieferantenAnlegen1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLieferantenAnlegen1ActionPerformed(evt);
            }
        });

        add(jButtonLieferantenAnlegen1);
        jButtonLieferantenAnlegen1.setBounds(220, 450, 170, 31);

        jComboBoxLieferantBearbeiten.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxLieferantBearbeitenActionPerformed(evt);
            }
        });
        jComboBoxLieferantBearbeiten.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                jComboBoxLieferantBearbeitenAncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        add(jComboBoxLieferantBearbeiten);
        jComboBoxLieferantBearbeiten.setBounds(130, 60, 250, 25);

        jButtonLieferantenAnlegen2.setText("Lieferanten l\u00f6schen");
        jButtonLieferantenAnlegen2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLieferantenAnlegen2ActionPerformed(evt);
            }
        });

        add(jButtonLieferantenAnlegen2);
        jButtonLieferantenAnlegen2.setBounds(420, 450, 170, 31);

        jLabelNeuerLieferantName.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabelNeuerLieferantName.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabelNeuerLieferantName.setText("Name");
        add(jLabelNeuerLieferantName);
        jLabelNeuerLieferantName.setBounds(440, 130, 90, 20);

        jTextFieldNeuerLieferantName.setDocument(new JTextFieldValidation(50));
        add(jTextFieldNeuerLieferantName);
        jTextFieldNeuerLieferantName.setBounds(510, 130, 250, 20);

        jLabelNeuerLieferantVorname.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabelNeuerLieferantVorname.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabelNeuerLieferantVorname.setText("Vorname");
        add(jLabelNeuerLieferantVorname);
        jLabelNeuerLieferantVorname.setBounds(440, 100, 90, 20);

        jTextFieldNeuerLieferantVorname.setDocument(new JTextFieldValidation(50));
        add(jTextFieldNeuerLieferantVorname);
        jTextFieldNeuerLieferantVorname.setBounds(510, 100, 250, 20);

        jTextFieldNeuerLieferantStrasse.setDocument(new JTextFieldValidation(50));
        add(jTextFieldNeuerLieferantStrasse);
        jTextFieldNeuerLieferantStrasse.setBounds(130, 130, 250, 20);

        jLabelNeuerLieferantStrasse.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabelNeuerLieferantStrasse.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabelNeuerLieferantStrasse.setText("Stra\u00dfe");
        add(jLabelNeuerLieferantStrasse);
        jLabelNeuerLieferantStrasse.setBounds(20, 130, 90, 20);

        jTextFieldNeuerLieferantFirma.setDocument(new JTextFieldValidation(50));
        add(jTextFieldNeuerLieferantFirma);
        jTextFieldNeuerLieferantFirma.setBounds(130, 100, 250, 20);

        jLabelLieferantenFirma.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabelLieferantenFirma.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabelLieferantenFirma.setText("Firma");
        add(jLabelLieferantenFirma);
        jLabelLieferantenFirma.setBounds(20, 100, 90, 20);

        jLabelNeuerLieferantOrt.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabelNeuerLieferantOrt.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabelNeuerLieferantOrt.setText("Ort");
        add(jLabelNeuerLieferantOrt);
        jLabelNeuerLieferantOrt.setBounds(20, 160, 90, 20);

        jTextFieldNeuerLieferantOrt.setDocument(new JTextFieldValidation(50));
        add(jTextFieldNeuerLieferantOrt);
        jTextFieldNeuerLieferantOrt.setBounds(130, 160, 160, 20);

        jLabelNeuerLieferantPLZ.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabelNeuerLieferantPLZ.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabelNeuerLieferantPLZ.setText("PLZ");
        add(jLabelNeuerLieferantPLZ);
        jLabelNeuerLieferantPLZ.setBounds(300, 160, 90, 20);

        jTextFieldNeuerLieferantPLZ.setColumns(5);
        jTextFieldNeuerLieferantPLZ.setDocument(new JTextFieldValidation(5));
        jTextFieldNeuerLieferantPLZ.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldNeuerLieferantPLZFocusLost(evt);
            }
        });

        add(jTextFieldNeuerLieferantPLZ);
        jTextFieldNeuerLieferantPLZ.setBounds(330, 160, 50, 20);

        jTextFieldNeuerLieferantFax.setDocument(new JTextFieldValidation(30));
        add(jTextFieldNeuerLieferantFax);
        jTextFieldNeuerLieferantFax.setBounds(510, 190, 250, 20);

        jLabelNeuerLieferantFax.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabelNeuerLieferantFax.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabelNeuerLieferantFax.setText("Fax");
        add(jLabelNeuerLieferantFax);
        jLabelNeuerLieferantFax.setBounds(440, 190, 90, 20);

        jTextFieldNeuerLieferantTelefon.setDocument(new JTextFieldValidation(30));
        add(jTextFieldNeuerLieferantTelefon);
        jTextFieldNeuerLieferantTelefon.setBounds(510, 160, 250, 20);

        jLabelNeuerLieferantTelefon.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabelNeuerLieferantTelefon.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabelNeuerLieferantTelefon.setText("Telefon");
        add(jLabelNeuerLieferantTelefon);
        jLabelNeuerLieferantTelefon.setBounds(440, 160, 90, 20);

        jLabelNeuerLieferantEMail.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabelNeuerLieferantEMail.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabelNeuerLieferantEMail.setText("eMail");
        add(jLabelNeuerLieferantEMail);
        jLabelNeuerLieferantEMail.setBounds(440, 220, 90, 20);

        jTextFieldNeuerLieferantEMail.setDocument(new JTextFieldValidation(50));
        jTextFieldNeuerLieferantEMail.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldNeuerLieferantEMailFocusLost(evt);
            }
        });

        add(jTextFieldNeuerLieferantEMail);
        jTextFieldNeuerLieferantEMail.setBounds(510, 220, 250, 20);

        jLabelNeuerLieferantLieferqualitaet.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabelNeuerLieferantLieferqualitaet.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabelNeuerLieferantLieferqualitaet.setText("Lieferqualit\u00e4t");
        add(jLabelNeuerLieferantLieferqualitaet);
        jLabelNeuerLieferantLieferqualitaet.setBounds(20, 200, 130, 20);

        jComboBoxNeuerLieferantLieferqualitaet.setEditable(true);
        jComboBoxNeuerLieferantLieferqualitaet.setFont(new java.awt.Font("Dialog", 0, 12));
        jComboBoxNeuerLieferantLieferqualitaet.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5", "6" }));
        jComboBoxNeuerLieferantLieferqualitaet.setSelectedIndex(2);
        add(jComboBoxNeuerLieferantLieferqualitaet);
        jComboBoxNeuerLieferantLieferqualitaet.setBounds(130, 200, 50, 25);

        jComboBoxNeuerLieferantZuverlaessigkeit.setEditable(true);
        jComboBoxNeuerLieferantZuverlaessigkeit.setFont(new java.awt.Font("Dialog", 0, 12));
        jComboBoxNeuerLieferantZuverlaessigkeit.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5", "6" }));
        jComboBoxNeuerLieferantZuverlaessigkeit.setSelectedIndex(2);
        add(jComboBoxNeuerLieferantZuverlaessigkeit);
        jComboBoxNeuerLieferantZuverlaessigkeit.setBounds(130, 240, 50, 25);

        jLabelNeuerLieferantZuverlaessigkeit.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabelNeuerLieferantZuverlaessigkeit.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabelNeuerLieferantZuverlaessigkeit.setText("Zuverl\u00e4ssigkeit");
        add(jLabelNeuerLieferantZuverlaessigkeit);
        jLabelNeuerLieferantZuverlaessigkeit.setBounds(20, 240, 130, 20);

        jComboBoxNeuerLieferantArtikel.setFont(new java.awt.Font("Dialog", 0, 12));
        add(jComboBoxNeuerLieferantArtikel);
        jComboBoxNeuerLieferantArtikel.setBounds(130, 330, 190, 25);

        jScrollPanePositionen.setMaximumSize(new java.awt.Dimension(300, 320));
        jScrollPanePositionen.setPreferredSize(new java.awt.Dimension(53, 3));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Artikelname", "Mindestaufnahme", "Artikelpreis"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPanePositionen.setViewportView(jTable1);

        add(jScrollPanePositionen);
        jScrollPanePositionen.setBounds(420, 330, 350, 90);

        jLabelNeuerLieferantLieferqualitaet1.setFont(new java.awt.Font("Dialog", 0, 10));
        jLabelNeuerLieferantLieferqualitaet1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabelNeuerLieferantLieferqualitaet1.setText("Punkte");
        add(jLabelNeuerLieferantLieferqualitaet1);
        jLabelNeuerLieferantLieferqualitaet1.setBounds(190, 200, 130, 20);

        jLabelNeuerLieferantLieferqualitaet2.setFont(new java.awt.Font("Dialog", 0, 10));
        jLabelNeuerLieferantLieferqualitaet2.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabelNeuerLieferantLieferqualitaet2.setText("Punkte");
        add(jLabelNeuerLieferantLieferqualitaet2);
        jLabelNeuerLieferantLieferqualitaet2.setBounds(190, 240, 130, 20);

        jLabel1.setFont(new java.awt.Font("Dialog", 0, 10));
        jLabel1.setText("[Bewertung nach Schulnotensystem]");
        add(jLabel1);
        jLabel1.setBounds(130, 270, 210, 20);

        jLabel2.setFont(new java.awt.Font("Dialog", 0, 10));
        jLabel2.setText("Ansprechpartner");
        add(jLabel2);
        jLabel2.setBounds(680, 70, 80, 20);

        jLabelLieferantBearbeitenUeberschrift.setFont(new java.awt.Font("Dialog", 1, 24));
        jLabelLieferantBearbeitenUeberschrift.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelLieferantBearbeitenUeberschrift.setText("Lieferant bearbeiten");
        add(jLabelLieferantBearbeitenUeberschrift);
        jLabelLieferantBearbeitenUeberschrift.setBounds(0, 0, 800, 40);

    }//GEN-END:initComponents

    private void jButtonLieferantenAnlegen2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLieferantenAnlegen2ActionPerformed
        int auswahl = getSelLieferantenID();
        if (auswahl != 0){
           loescheLieferant(getSelLieferantenID());
        }else{
             JOptionPane.showMessageDialog(this, "Bitte wählen Sie erst einen Lieferanten aus.","Fehler beim Löschen eines Kunden", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButtonLieferantenAnlegen2ActionPerformed

    private void jTextFieldNeuerLieferantPLZFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldNeuerLieferantPLZFocusLost
Validator validate = new Validator();
String plz = jTextFieldNeuerLieferantPLZ.getText();

boolean plzOk = false;

if (!plz.equals("") && plz != null) {

    while (!plzOk && plz != null) {

        if (!validate.checkPlz(plz)) {
            plz = JOptionPane.showInputDialog("Ungültige PLZ! Bitte neu eingeben:", plz);
        } else {
            plzOk = true;
        }
    }
    if (plz != null) {
        jTextFieldNeuerLieferantPLZ.setText(plz);
    } else {
        jTextFieldNeuerLieferantPLZ.setText("");
    }
}
    }//GEN-LAST:event_jTextFieldNeuerLieferantPLZFocusLost

    private void jTextFieldNeuerLieferantEMailFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldNeuerLieferantEMailFocusLost
Validator validate = new Validator();
String email = jTextFieldNeuerLieferantEMail.getText();

boolean emailOk = false;

if (!email.equals("") && email != null) {

    while (!emailOk && email != null) {

        if (!validate.checkEMail(email)) {
            email = JOptionPane.showInputDialog("Ungültige eMail! Bitte neu eingeben:", email);
        } else {
            emailOk = true;
        }
    }
    if (email != null) {
        jTextFieldNeuerLieferantEMail.setText(email);
    } else {
        jTextFieldNeuerLieferantEMail.setText("");
    }
}
    }//GEN-LAST:event_jTextFieldNeuerLieferantEMailFocusLost

    private void jTextFieldLieferantBearbeitenMindestAbnahmeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldLieferantBearbeitenMindestAbnahmeFocusLost
    Validator validate = new Validator();
    String zahl = jTextFieldLieferantBearbeitenMindestAbnahme.getText();
    
    boolean zahlOk = false;
    if (!zahl.equals("")) {
      while (!zahlOk && zahl != null) {
        if (!validate.checkZahl(zahl)) {
          zahl = JOptionPane.showInputDialog("Ungültige Zahl!", zahl);
        } else {
          zahlOk = true;
        }
      }
      if (zahl != null) {
        jTextFieldLieferantBearbeitenMindestAbnahme.setText(zahl);
      } else {
        jTextFieldLieferantBearbeitenMindestAbnahme.setText("");
      }
    }
    }//GEN-LAST:event_jTextFieldLieferantBearbeitenMindestAbnahmeFocusLost

    private void jTextFieldLieferantBearbeitenArtikelPreisFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldLieferantBearbeitenArtikelPreisFocusLost

    
    Validator validate = new Validator();
    String preis = jTextFieldLieferantBearbeitenArtikelPreis.getText();
    
    //Falls Zahl ohne "." eingegeben wurde wird ".0" ergänzt
    if (preis.matches("^[0-9]{1,7}$")) {
        preis = preis + ".00";
        jTextFieldLieferantBearbeitenArtikelPreis.setText(preis);
    }
    
    //Falls Zahl mit "," statt "." wird "," mit "." ersetzt
    if (preis.matches("^[0-9]{1,7}[,][0-9]{1,2}$")) {
        preis = preis.replaceAll(",", ".");
        jTextFieldLieferantBearbeitenArtikelPreis.setText(preis);
    }
    
    boolean preisOk = false;
    if (!preis.equals("")) {
      while (!preisOk && preis != null) {
        if (!validate.checkPreis(preis)) {
          preis = JOptionPane.showInputDialog("Ungültiger Peis! Bitte geben Sie den Preis implements Format xx.xx ein!", preis);
        
        //Falls Zahl ohne "." eingegeben wurde wird ".0" ergänzt
        if (preis != null) {
            if (preis.matches("^[0-9]{1,7}$")) {
                preis = preis + ".00";
                jTextFieldLieferantBearbeitenArtikelPreis.setText(preis);
            }
            
            //Falls Zahl mit "," statt "." wird "," mit "." ersetzt
            if (preis.matches("^[0-9]{1,7}[,][0-9]{1,2}$")) {
                preis = preis.replaceAll(",", ".");
                jTextFieldLieferantBearbeitenArtikelPreis.setText(preis);
            }
        }
        
        } else {
          preisOk = true;
        }
      }
      if (preis != null) {
        jTextFieldLieferantBearbeitenArtikelPreis.setText(preis);
      } else {
        jTextFieldLieferantBearbeitenArtikelPreis.setText("");
      }
    }
    }//GEN-LAST:event_jTextFieldLieferantBearbeitenArtikelPreisFocusLost
    private void jButtonLieferantBearbeitenArtikelEntfernenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLieferantBearbeitenArtikelEntfernenActionPerformed
int SelectedPosition = jTable1.getSelectedRow();
        
//gesamter Tabelleninhalt wird Zwischengespeichert
Vector tableTempRow = new Vector();
int row = 0;
    
    while (row < position) {
        tableTempRow.add(jTable1.getValueAt(row, 0) + "," + jTable1.getValueAt(row, 1) + "," + jTable1.getValueAt(row, 2));
        row++;
    }
        
  //Selektierte Zeile wird gelöscht
    
    if (SelectedPosition >= 0) {
    
        if (jTable1.getValueAt(SelectedPosition, 0) != null) {
            zubehoerTabelle.remove(String.valueOf(jTable1.getValueAt(SelectedPosition, 0)));
            jTable1.setValueAt(null, SelectedPosition, 0);
            jTable1.setValueAt(null, SelectedPosition, 1);
            jTable1.setValueAt(null, SelectedPosition, 2);
            tableTempRow.remove(SelectedPosition);
            position--;
        }
    }
        
  //DefaultTableModel mit Variablen Zeilen, 3 TableHeads und nicht editierbaren Zellen
    boolean Deleted = true;
    updatePositionsTable(Deleted);
        
  //Tabelle wird neu geschrieben
    if (tableTempRow.size() > 0) {
        Iterator it_tableTempRow = tableTempRow.iterator();
        row = 0;
        
            while (it_tableTempRow.hasNext()) {
                String complete = (String) it_tableTempRow.next();
                String[] chunks = complete.split(",");
                jTable1.setValueAt(chunks[0], row, 0);
                jTable1.setValueAt(chunks[1], row, 1);
                jTable1.setValueAt(chunks[2], row, 2);
                row++;
            }
    }
    position = tableTempRow.size();
      
    if (position != 0) {
        jTable1.setRowSelectionInterval(position-1, position-1);
    }
    }//GEN-LAST:event_jButtonLieferantBearbeitenArtikelEntfernenActionPerformed
    private void jButtonLieferantBearbeitenArtikelHinzufuegenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLieferantBearbeitenArtikelHinzufuegenActionPerformed
Vector errors = new Vector();

if (jTextFieldLieferantBearbeitenArtikelPreis.getText().equals(""))
    errors.add("Artikelpreis");

if (jTextFieldLieferantBearbeitenMindestAbnahme.getText().equals(""))
    errors.add("Mindestabnahme");

if (errors.isEmpty()){
    String artikel = jComboBoxNeuerLieferantArtikel.getSelectedItem().toString();
    
    if (!artikel.equals("Bitte wählen")) {
       String preis = String.valueOf(Float.parseFloat(jTextFieldLieferantBearbeitenArtikelPreis.getText()));
       int menge = Integer.parseInt(jTextFieldLieferantBearbeitenMindestAbnahme.getText());
           
       //gesamter Tabelleninhalt wird Zwischengespeichert
       Vector tableTempRow = new Vector();
       int row = 0;
            while (row < position) {
                tableTempRow.add(jTable1.getValueAt(row, 0) + "," + jTable1.getValueAt(row, 1) + "," + jTable1.getValueAt(row, 2));
                row++;
            }
           
            if (!zubehoerTabelle.containsValue(String.valueOf(jComboBoxNeuerLieferantArtikel.getSelectedIndex()))){

             //Position hinzufügen:
                Einzelteil teil = new Einzelteil();
                Einzelteil eteil = (Einzelteil) alleArtikel.get(jComboBoxNeuerLieferantArtikel.getSelectedIndex());
                teil.setNr(eteil.getNr());
                zubehoerTabelle.put(String.valueOf(jComboBoxNeuerLieferantArtikel.getSelectedItem()),String.valueOf(jComboBoxNeuerLieferantArtikel.getSelectedIndex())); 
                alleArtikel.add(alleArtikel.get(jComboBoxNeuerLieferantArtikel.getSelectedIndex()));
                
             //DefaultTableModel mit Variablen Zeilen, 3 TableHeads und nicht editierbaren Zellen
                boolean Deleted = false;
                updatePositionsTable(Deleted);
              
             //Tabelle wird neu geschrieben
                if (tableTempRow.size() > 0) {
                    Iterator it_tableTempRow = tableTempRow.iterator();
                    row = 0;
                    
                    while (it_tableTempRow.hasNext()) {
                        String complete = (String) it_tableTempRow.next();
                        String[] chunks = complete.split(",");
                        jTable1.setValueAt(chunks[0], row, 0);
                        jTable1.setValueAt(chunks[1], row, 1);
                        jTable1.setValueAt(chunks[2], row, 2);
                        row++;
                    }
                } 
                jTable1.setValueAt(artikel, position, 0);
                jTable1.setValueAt(String.valueOf(menge), position, 1); 
                jTable1.setValueAt(preis, position, 2);
                position++;
                jTable1.setRowSelectionInterval(position-1, position-1);
            }else {
                JOptionPane.showMessageDialog(null, "Dieser Artikel ist bereits vorhanden!");
            } 
    }
}else {     
    if (errors.size() > 1)
        JOptionPane.showMessageDialog(this, "Folgende Felder müssen ausgefüllt werden: "
        + errors.toString().substring(1,errors.toString().length()-1), "Fehler beim Hinzufügen des Artikels", JOptionPane.ERROR_MESSAGE);
    else
        JOptionPane.showMessageDialog(this, "Das folgende Feld muss ausgefüllt werden: "
        + errors.toString().substring(1,errors.toString().length()-1), "Fehler beim Hinzufügen des Artikels", JOptionPane.ERROR_MESSAGE);
}
    }//GEN-LAST:event_jButtonLieferantBearbeitenArtikelHinzufuegenActionPerformed

    private void jButtonLieferantenAnlegen1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLieferantenAnlegen1ActionPerformed
int auswahl = getSelLieferantenID();
        
if (auswahl == 0){
    JOptionPane.showMessageDialog(this, "Bitte wählen Sie erst einen Lieferanten aus.","Fehler beim Löschen eines Kunden", JOptionPane.ERROR_MESSAGE);
}
else{
    Vector check = new Vector();
    if (jTextFieldNeuerLieferantFirma.getText().equals(""))
        check.add("Firma");
    if (jTextFieldNeuerLieferantName.getText().equals(""))
        check.add("Name");
    if (jTextFieldNeuerLieferantVorname.getText().equals(""))
        check.add("Vorname");
    if (jTextFieldNeuerLieferantTelefon.getText().equals(""))
        check.add("Telefon");
    if (jTextFieldNeuerLieferantStrasse.getText().equals(""))
        check.add("Strasse");
    if (jTextFieldNeuerLieferantOrt.getText().equals(""))
        check.add("Ort");
    if (jTextFieldNeuerLieferantPLZ.getText().equals(""))
        check.add("PLZ");
    if (!check.isEmpty()) {
    
        if (check.size() > 1)
            JOptionPane.showMessageDialog(this, "Folgende Felder müssen ausgefüllt werden: "
        + check.toString().substring(1,check.toString().length()-1), "Fehler beim Bearbeiten des Lieferanten", JOptionPane.ERROR_MESSAGE);
        else
            JOptionPane.showMessageDialog(this, "Folgende Felder müssen ausgefüllt werden: "
        + check.toString().substring(1,check.toString().length()-1), "Fehler beim Bearbeiten des Lieferanten", JOptionPane.ERROR_MESSAGE);
    } else {
          
    //liefert listItem des selektierten Eintrags
        String selectedItem = String.valueOf(jComboBoxLieferantBearbeiten.getSelectedIndex());
    //sucht das aktive KundenObjekt in Hashtabelle kundenAuswahl
        Lieferant changedLieferant = (Lieferant)lieferantenObjekte.get(selectedItem);   
        int ltID = changedLieferant.getId();          
          
        Lieferant lieferant = new Lieferant();
        lieferant.setId(ltID);
        lieferant.setNachname(jTextFieldNeuerLieferantName.getText());
        lieferant.setVorname(jTextFieldNeuerLieferantVorname.getText());
        lieferant.setFirma(jTextFieldNeuerLieferantFirma.getText());
        lieferant.setStrasse(jTextFieldNeuerLieferantStrasse.getText());
        lieferant.setTelefon(jTextFieldNeuerLieferantTelefon.getText());
        lieferant.setFax(jTextFieldNeuerLieferantFax.getText());
        lieferant.setEmail(jTextFieldNeuerLieferantEMail.getText());
        lieferant.setPlz(jTextFieldNeuerLieferantPLZ.getText());
        lieferant.setOrt(jTextFieldNeuerLieferantOrt.getText());  
        lieferant.setLieferqualitaet(String.valueOf(jComboBoxNeuerLieferantLieferqualitaet.getSelectedItem()));
        lieferant.setZuverlaessigkeit(String.valueOf(jComboBoxNeuerLieferantZuverlaessigkeit.getSelectedItem()));
        
        try {
            Ort ort = new Ort();
            ort.setName(lieferant.getOrt());
            ort.setPlz(lieferant.getPlz());  
            lieferant.setPlzId(dao.neuerOrt(ort));
              
            //Tabelle wird neu geschrieben
            if (jTable1.getRowCount() >= 0) {
                    
                loescheZugehoerigeEinzelteile(ltID);
                Lieferliste liste = new Lieferliste();
                
                for (int row = 0; row < jTable1.getRowCount(); row++){
                    liste.setLieferantenID(ltID);
                    String zubehoerName = (String) jTable1.getValueAt(row,0);
                    String zubehoerId = (String) zubehoerTabelle.get(zubehoerName);
                    liste.setEinzelteilID(Integer.parseInt(zubehoerId)); 
                    liste.setPreis(Double.parseDouble(String.valueOf(jTable1.getValueAt(row,2))));
                    liste.setMindestBestellMenge(Long.parseLong(String.valueOf(jTable1.getValueAt(row,1)))); 
                    dao.setLieferliste(liste);
                }
            }   
        } catch (WiSimDAOException e) {
            System.err.println(e.getMessage());
        } catch (WiSimDAOWriteException e) {
            System.err.println(e.getMessage());
        }
        Date dateNow = new Date();
        java.sql.Date sqlDateNow = new java.sql.Date(dateNow.getTime());
          
        try { 
            int changed = dao.aendereLieferant(lieferant);
            ladeLieferanten();
            ladeLieferant();
            setzeStandard();
        }catch (Exception e) {
            System.err.println("Fehler: " + e.getMessage());
        }
    }
}
    }//GEN-LAST:event_jButtonLieferantenAnlegen1ActionPerformed
   
    private void jComboBoxLieferantBearbeitenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxLieferantBearbeitenActionPerformed
        if (jComboBoxLieferantBearbeiten.getSelectedItem().equals("Bitte wählen")) {
            setzeStandard();
        }else
            ladeLieferant();
    }//GEN-LAST:event_jComboBoxLieferantBearbeitenActionPerformed

    private void jComboBoxLieferantBearbeitenAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_jComboBoxLieferantBearbeitenAncestorAdded
        ladeLieferanten();
        ladeEinzelteile();              
    }//GEN-LAST:event_jComboBoxLieferantBearbeitenAncestorAdded

//Füllt die ComboBox Lieferantenliste mit den in der DB vorhandenen Lieferanten
private void ladeLieferanten() {
    Collection lieferantenliste = null;
    try {
        lieferantenliste = dao.getLieferanten();
    } catch (WiSimDAOException e) {
        System.err.println(e.getMessage());
    }
    DefaultComboBoxModel model = (DefaultComboBoxModel)jComboBoxLieferantBearbeiten.getModel();
    model.removeAllElements();
    model.addElement("Bitte wählen");
        
    // Verhindert NullPointerException bei einer leeren Liste
    int indexcounter = 0;
    
    if (lieferantenliste != null) {
        Iterator it = lieferantenliste.iterator();
       
        while (it.hasNext()) {
            indexcounter++;
            Lieferant listenlieferant = (Lieferant) it.next();
            String listItem = String.valueOf(listenlieferant.getFirma());
            model.addElement(listItem);
            lieferantenObjekte.put((String.valueOf(indexcounter)),listenlieferant);
            lieferantenAuswahl.put((String.valueOf(indexcounter)),String.valueOf(listenlieferant.getId()));
        }
        jComboBoxLieferantBearbeiten.setModel(model);
    }
}
       
//Lädt einen Kunden zum Bearbeiten aus der Datenbank
 private void ladeLieferant() {  
       
    //liefert listItem des selektierten Eintrags        
    String listItem = String.valueOf(jComboBoxLieferantBearbeiten.getSelectedIndex());
    //sucht das aktive KundenObjekt in Hashtabelle lieferantenObjekte
    Lieferant auswahlLieferant = (Lieferant)lieferantenObjekte.get(listItem);          
    position = 0;
    boolean Deleted = true;
    updatePositionsTable(Deleted);
        
    if (auswahlLieferant != null){  
        jTextFieldNeuerLieferantName.setText(auswahlLieferant.getNachname());
        jTextFieldNeuerLieferantVorname.setText(auswahlLieferant.getVorname());
        jTextFieldNeuerLieferantFirma.setText(auswahlLieferant.getFirma());
        jTextFieldNeuerLieferantStrasse.setText(auswahlLieferant.getStrasse());
        jTextFieldNeuerLieferantTelefon.setText(auswahlLieferant.getTelefon());
        jTextFieldNeuerLieferantFax.setText(auswahlLieferant.getFax());
        jTextFieldNeuerLieferantEMail.setText(auswahlLieferant.getEmail());
        jTextFieldNeuerLieferantPLZ.setText(String.valueOf(auswahlLieferant.getPlz()));
        jTextFieldNeuerLieferantOrt.setText(auswahlLieferant.getOrt());
        jComboBoxNeuerLieferantLieferqualitaet.setSelectedItem(auswahlLieferant.getLieferqualitaet());
        jComboBoxNeuerLieferantZuverlaessigkeit.setSelectedItem(auswahlLieferant.getZuverlaessigkeit());
        zubehoerTabelle.clear();
        ladeZugehoerigeEinzelteile(auswahlLieferant.getId());                
    }
}
        

//Füllt die ComboBox Einzelteile mit den in der DB vorhandenen Teilen
private void ladeEinzelteile() {
    Collection teile = null;
    try {
        teile = dao.getEinzelteile();
    } catch (WiSimDAOException e) {
        System.err.println(e.getMessage());
    }
    DefaultComboBoxModel model = (DefaultComboBoxModel) jComboBoxNeuerLieferantArtikel.getModel();
    model.removeAllElements();
    model.addElement("Bitte wählen");
    
    // Verhindert NullPointerException bei einer leeren Liste
    if (teile != null) {
        Iterator it = teile.iterator();
      
        while (it.hasNext()) {
            Einzelteil teil = (Einzelteil) it.next();
            if (teil.getNr() != HUB)
            	model.addElement(teil.getName());
            einzelteileTabelle.put(teil.getName(), String.valueOf(teil.getNr()));
            Einzelteil etatPos = new Einzelteil();
            etatPos.setNr(teil.getNr());
            alleArtikel.add(etatPos);             
        }
        jComboBoxNeuerLieferantArtikel.setModel(model);
    }
}

// Ladet die Einzelteile des Lieferanten 
private void loescheZugehoerigeEinzelteile(int id){      
  
    try {
        Collection lieferliste = null;
        lieferliste = dao.getLieferliste(id);
        Iterator it_lieferlisten = lieferliste.iterator();
      
        while (it_lieferlisten.hasNext()) {
            Lieferliste liste = (Lieferliste) it_lieferlisten.next();
            Einzelteil einzelteil = dao.getEinzelteil(liste.getEinzelteilID());
            dao.loescheLieferliste(id,liste.getEinzelteilID());
       }
    } catch (WiSimDAOException e) {
        System.err.println(e.getMessage());
    } catch (WiSimDAOWriteException w) {
        System.err.println(w.getMessage());
    }
}
  
// Ladet die Einzelteile des Lieferanten 
private void ladeZugehoerigeEinzelteile(int id){      
  
    try {
        Collection lieferliste = null;
        Einzelteil einzelteil = null;
        lieferliste = dao.getLieferliste(id);
        Iterator it_lieferlisten = lieferliste.iterator();
      
        while (it_lieferlisten.hasNext()) {
            Lieferliste liste = (Lieferliste) it_lieferlisten.next();
            einzelteil = dao.getEinzelteil(liste.getEinzelteilID());
                    
          //gesamter Tabelleninhalt wird Zwischengespeichert
            Vector tableTempRow = new Vector();
            int row = 0;
            
                while (row < position) {
                    tableTempRow.add(jTable1.getValueAt(row, 0) + "," + jTable1.getValueAt(row, 1) + "," + jTable1.getValueAt(row, 2));
                    row++;
                }
                    
          //DefaultTableModel mit Variablen Zeilen, 3 TableHeads und nicht editierbaren Zellen
            boolean Deleted = false;
            updatePositionsTable(Deleted);
            
            if (tableTempRow.size() > 0) {
                Iterator it_tableTempRow = tableTempRow.iterator();
                row = 0;
                while (it_tableTempRow.hasNext()) {
                    String complete = (String) it_tableTempRow.next();
                    String[] chunks = complete.split(",");
                    jTable1.setValueAt(chunks[0], row, 0);
                    jTable1.setValueAt(chunks[1], row, 1);
                    jTable1.setValueAt(chunks[2], row, 2);
                    row++;
                }
            }
           
            zubehoerTabelle.put(einzelteil.getName(),String.valueOf(einzelteil.getNr()));
            jTable1.setValueAt(einzelteil.getName(), position, 0);
            jTable1.setValueAt(String.valueOf(liste.getMindestBestellMenge()), position, 1);
            jTable1.setValueAt(String.valueOf(liste.getPreis()), position, 2);
            position++;
            jTable1.setRowSelectionInterval(position-1, position-1);
       }
    } catch (WiSimDAOException e) {
            System.err.println(e.getMessage());
    }
}

//Setzt Lieferantenstatus auf gelöscht
  private void loescheLieferant(int LtId){ 
          int submit = JOptionPane.showConfirmDialog(this, "Wollen Sie den Lieferanten wirklich löschen?", "Lieferant löschen", JOptionPane.YES_NO_OPTION);
          if (submit == 0){
          try{
              dao.setLieferantLoeschStatus(LtId,true);
              ladeLieferanten();
          } catch (WiSimDAOException e) {
                   System.err.println("Fehler: " + e.getMessage());
            } catch (WiSimDAOWriteException e) {
                     System.err.println("Fehler: " + e.getMessage());
              }
          }
  }     

// Setzt nach dem Speichern und Löschen eines Lieferanten die Werte auf Standard
private void setzeStandard() {
    jTextFieldNeuerLieferantVorname.setText("");
    jTextFieldNeuerLieferantName.setText("");
    jTextFieldNeuerLieferantFirma.setText("");
    jTextFieldNeuerLieferantStrasse.setText("");
    jTextFieldNeuerLieferantOrt.setText("");
    jTextFieldNeuerLieferantPLZ.setText("");
    jTextFieldNeuerLieferantTelefon.setText("");
    jTextFieldNeuerLieferantEMail.setText("");
    jTextFieldNeuerLieferantFax.setText("");
    jComboBoxNeuerLieferantLieferqualitaet.setSelectedIndex(2);
    jComboBoxNeuerLieferantZuverlaessigkeit.setSelectedIndex(2);
    jComboBoxNeuerLieferantArtikel.setSelectedItem("Bitte wählen");
    jTextFieldLieferantBearbeitenArtikelPreis.setText("");
    jTextFieldLieferantBearbeitenMindestAbnahme.setText("");
    position = 0;
    boolean Deleted = true;
    updatePositionsTable(Deleted);
}
    
/** Schreibt die Positions-Tabelle neu
 * @param Deleted boolean
 */  
public void updatePositionsTable(boolean Deleted) {
    int rows;
    
    if (Deleted == true) {
        rows = position;
    } else {
        rows = position + 1;
    }
    //DefaultTableModel mit Variablen Zeilen, 3 TableHeads und nicht editierbaren Zellen
    Object[][] tableInit = new Object[rows][3];
    DefaultTableModel defTable = new DefaultTableModel(
        tableInit,
        new String [] {
            "Artikel", "MinAbnahme", "Preis/Stk"
        }
    ) 
    {
        boolean[] canEdit = new boolean [] {
            false, false, false
        };
        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return canEdit [columnIndex];
        }
    };
    jTable1.setModel(defTable);
    jTable1.setFocusable(false);
    javax.swing.table.TableColumn column = null;
        
        //Spaltenbreiten der Tabelle werden gesetzt
        for (int i = 0; i < 3; i++) {
            column = jTable1.getColumnModel().getColumn(i);
            switch (i) {
                    //Artikel
                case 0:
                    column.setPreferredWidth(120);
                    break;
                    //Menge
                case 1:
                    column.setPreferredWidth(10);
                    break;
                    //Preis
                case 2:
                    column.setPreferredWidth(15);
                    break;                   
            }       
        }
}
    
  /** Liefert die KD_Nr des aktiven Kunden
   * @return int
   */  
  private int getSelLieferantenID(){
    //liefert listItem des selektierten Eintrags
    String listItem = String.valueOf(jComboBoxLieferantBearbeiten.getSelectedIndex());   
    //sucht das aktive KundenObjekt in Hashtabelle kundenObjekte
    Lieferant auswahlLieferant = (Lieferant)lieferantenObjekte.get(listItem);
    if (auswahlLieferant != null){ 
        return auswahlLieferant.getId();
    }else return 0;
  }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonLieferantBearbeitenArtikelEntfernen;
    private javax.swing.JButton jButtonLieferantBearbeitenArtikelHinzufuegen;
    private javax.swing.JButton jButtonLieferantenAnlegen1;
    private javax.swing.JButton jButtonLieferantenAnlegen2;
    private javax.swing.JComboBox jComboBoxLieferantBearbeiten;
    private javax.swing.JComboBox jComboBoxNeuerLieferantArtikel;
    private javax.swing.JComboBox jComboBoxNeuerLieferantLieferqualitaet;
    private javax.swing.JComboBox jComboBoxNeuerLieferantZuverlaessigkeit;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabelArtikelName1;
    private javax.swing.JLabel jLabelArtikelPreis1;
    private javax.swing.JLabel jLabelLieferantBearbeitenUeberschrift;
    private javax.swing.JLabel jLabelLieferantenFirma;
    private javax.swing.JLabel jLabelMindestAbnahme3;
    private javax.swing.JLabel jLabelNeuerLieferantEMail;
    private javax.swing.JLabel jLabelNeuerLieferantFax;
    private javax.swing.JLabel jLabelNeuerLieferantLieferqualitaet;
    private javax.swing.JLabel jLabelNeuerLieferantLieferqualitaet1;
    private javax.swing.JLabel jLabelNeuerLieferantLieferqualitaet2;
    private javax.swing.JLabel jLabelNeuerLieferantName;
    private javax.swing.JLabel jLabelNeuerLieferantOrt;
    private javax.swing.JLabel jLabelNeuerLieferantPLZ;
    private javax.swing.JLabel jLabelNeuerLieferantStrasse;
    private javax.swing.JLabel jLabelNeuerLieferantTelefon;
    private javax.swing.JLabel jLabelNeuerLieferantVorname;
    private javax.swing.JLabel jLabelNeuerLieferantZuverlaessigkeit;
    private javax.swing.JScrollPane jScrollPanePositionen;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextFieldLieferantBearbeitenArtikelPreis;
    private javax.swing.JTextField jTextFieldLieferantBearbeitenMindestAbnahme;
    private javax.swing.JTextField jTextFieldNeuerLieferantEMail;
    private javax.swing.JTextField jTextFieldNeuerLieferantFax;
    private javax.swing.JTextField jTextFieldNeuerLieferantFirma;
    private javax.swing.JTextField jTextFieldNeuerLieferantName;
    private javax.swing.JTextField jTextFieldNeuerLieferantOrt;
    private javax.swing.JTextField jTextFieldNeuerLieferantPLZ;
    private javax.swing.JTextField jTextFieldNeuerLieferantStrasse;
    private javax.swing.JTextField jTextFieldNeuerLieferantTelefon;
    private javax.swing.JTextField jTextFieldNeuerLieferantVorname;
    // End of variables declaration//GEN-END:variables
  
}
