/*   ********************************************************************   **
**   Copyright notice                                                       **
**                                                                          **
**   (c) 2003 WiSim Development Team                                        **
**   https://github.com/kpatzwald/WiSim                                     **
**                                                                          **
**   All rights reserved                                                    **
**                                                                          **
**   This script is part of the WiSim Business Game project. The WiSim      **
**   project is free software; you can redistribute it and/or modify        **
**   it under the terms of the GNU General Public License as published by   **
**   the Free Software Foundation; either version 2 of the License, or      **
**   (at your option) any later version.                                    **
**                                                                          **
**   The GNU General Public License can be found at                         **
**   http://www.gnu.org/copyleft/gpl.html.                                  **
**   A copy is found in the textfile GPL.txt and important notices to the   **
**   license from the team is found in the textfile LICENSE.txt distributed **
**   in these package.                                                      **
**                                                                          **
**   This copyright notice MUST APPEAR in all copies of the file!           **
**   ********************************************************************   */

 /*
 * JPanelBestellung.java
 *
 * Created on 10. Februar 2003, 20:52
 */
package net.sourceforge.wisim.controller;

import java.text.DecimalFormat;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.Vector;
import java.util.logging.Level;
import javax.swing.JOptionPane;
import javax.swing.SpinnerNumberModel;
import javax.swing.table.DefaultTableModel;
import net.sourceforge.wisim.dao.WiSimDAO;
import net.sourceforge.wisim.dao.WiSimDAOException;
import net.sourceforge.wisim.dao.WiSimDAOWriteException;
import net.sourceforge.wisim.model.ComponentContract;
import net.sourceforge.wisim.model.ComponentContractInvoice;
import net.sourceforge.wisim.model.ComponentContractItem;
import net.sourceforge.wisim.model.Supplier;
import net.sourceforge.wisim.model.SupplyList;
import net.sourceforge.wisim.model.Validator;
import net.sourceforge.wisim.model.WiSimComponent;
import net.sourceforge.wisim.model.WiSimLogger;

/**
 * Masken f√ºr die WiSimComponent-Bestellung
 *
 * @author benjamin.pasero
 */
public class JPanelNewOrder extends javax.swing.JPanel {

  private WiSimDAO dao;
  private Vector colLt;
  private Vector colArtikel;
  private Vector positionen;
  private final ArrayList<ComponentContractItem> einzelteile;
  private int position;
  private double summe;
  private double skontoToCalc;
  private double lieferrabattToCalc;
  private final Validator validate;
  private final WiSimMainController wiSimMainController;

  //	Logger
  private final WiSimLogger wiSimLogger;

  private final DecimalFormat format;

  /**
   * Creates new form JPanelBestellung
   *
   * @param wiSimMainController Der WiSimMainController
   */
  public JPanelNewOrder(WiSimMainController wiSimMainController) {
    this.wiSimMainController = wiSimMainController;
    wiSimLogger = wiSimMainController.getWiSimLogger();
    initDAO(wiSimMainController);
    colLt = new Vector();
    colLt.add("Select:");
    colArtikel = new Vector();
    colArtikel.add("Select:");
    positionen = new Vector();
    einzelteile = new ArrayList<>();
    position = 0;
    summe = 0;
    skontoToCalc = 0;
    lieferrabattToCalc = 0;
    validate = new Validator();
    initComponents();
    format = new DecimalFormat("###,##0.00");
  }

  private void initDAO(WiSimMainController wiSimMainController) {
    dao = wiSimMainController.getDAO();
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
	private void initComponents() {//GEN-BEGIN:initComponents
		jOptionAlert = new javax.swing.JOptionPane();
		jOptionPaneConfirm = new javax.swing.JOptionPane();

		jLabelUeberschriftBestellung = new javax.swing.JLabel();
		jButtonBestellungAbschicken = new javax.swing.JButton();
		jPanelEinzelteilAuftragLieferant = new javax.swing.JPanel();
		jComboBoxLieferanten = new javax.swing.JComboBox();
		jLabelLieferqualitaet = new javax.swing.JLabel();
		jTextFieldLieferqualitaet = new javax.swing.JTextField();
		jTextFieldLiefertreue = new javax.swing.JTextField();
		jLabelLiefertreue = new javax.swing.JLabel();
		jLabelFirma = new javax.swing.JLabel();
		jTextFieldAnsprechperson = new javax.swing.JTextField();
		jLabelAnsprechperson = new javax.swing.JLabel();
		jPanelEinzelteilLieferkonditionen = new javax.swing.JPanel();
		jLabelSkonto = new javax.swing.JLabel();
		jTextFieldSkonto = new javax.swing.JTextField();
		jLabelProzent2 = new javax.swing.JLabel();
		jLabelSkontofrist = new javax.swing.JLabel();
		jTextFieldSkontofrist = new javax.swing.JTextField();
		jLabelTage = new javax.swing.JLabel();
		jLabelNettozahldatum = new javax.swing.JLabel();
		jLabelLieferdatum = new javax.swing.JLabel();
		jTextFieldLieferdatumTag = new javax.swing.JTextField();
		jTextFieldLieferdatumMonat = new javax.swing.JTextField();
		jTextFieldLieferdatumJahr = new javax.swing.JTextField();
		jLabelLieferrabatt = new javax.swing.JLabel();
		jTextFieldLieferrabatt = new javax.swing.JTextField();
		jLabelProzent = new javax.swing.JLabel();
		jPanelNettoZahlDatum = new javax.swing.JPanel();
		jLabelNettozahldatumValue = new javax.swing.JLabel();
		jPanelEinzelteilPositionen = new javax.swing.JPanel();
		jLabelArtikel = new javax.swing.JLabel();
		jComboBoxArtikel = new javax.swing.JComboBox();
		jLabelPreis = new javax.swing.JLabel();
		jTextFieldPreis = new javax.swing.JTextField();
		jLabelMinAbnahme = new javax.swing.JLabel();
		jTextFieldMindestAbnahme = new javax.swing.JTextField();
		jLabelMenge = new javax.swing.JLabel();
		jSpinnerMenge = new javax.swing.JSpinner();
		jButtonRemovePosition = new javax.swing.JButton();
		jButtonAddPosition = new javax.swing.JButton();
		jLabelZwischensumme = new javax.swing.JLabel();
		jTextFieldSumme = new javax.swing.JTextField();
		jScrollPanePositionen = new javax.swing.JScrollPane();
		jTablePositionen = new javax.swing.JTable();
		jTablePositionen.setSelectionMode(0);
		jTablePositionen.getTableHeader().setReorderingAllowed(false);

		jLabelPositionen = new javax.swing.JLabel();
		jLabelEuro2 = new javax.swing.JLabel();
		jLabelEuro = new javax.swing.JLabel();
		jLabelStk = new javax.swing.JLabel();
		jButtonLoeschen = new javax.swing.JButton();
		jPanelGesamt = new javax.swing.JPanel();
		jLabelAbzLieferrabatt = new javax.swing.JLabel();
		jLabelAbzSkonto = new javax.swing.JLabel();
		jTextFieldCalcLieferrabatt = new javax.swing.JTextField();
		jTextFieldCalcSkonto = new javax.swing.JTextField();
		jLabelGesamt = new javax.swing.JLabel();
		jTextFieldCalcGesamt = new javax.swing.JTextField();
		jLabelEuro3 = new javax.swing.JLabel();
		jLabelEuro4 = new javax.swing.JLabel();
		jLabelEuro5 = new javax.swing.JLabel();

		jOptionAlert.setMessageType(0);
		jOptionPaneConfirm.setMessageType(0);

		setLayout(null);

		setPreferredSize(new java.awt.Dimension(800, 600));
		addAncestorListener(new javax.swing.event.AncestorListener() {
			public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
			}
			public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
				formAncestorAdded(evt);
			}
			public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
			}
		});

		jLabelUeberschriftBestellung.setFont(new java.awt.Font("Dialog", 1, 24));
		jLabelUeberschriftBestellung.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		jLabelUeberschriftBestellung.setText("Einzelteil Auftrag");
		add(jLabelUeberschriftBestellung);
		jLabelUeberschriftBestellung.setBounds(0, 0, 800, 40);

		jButtonBestellungAbschicken.setFont(new java.awt.Font("Dialog", 1, 18));
		jButtonBestellungAbschicken.setText("Bestellen");
		jButtonBestellungAbschicken.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButtonBestellungAbschickenActionPerformed(evt);
			}
		});

		add(jButtonBestellungAbschicken);
		jButtonBestellungAbschicken.setBounds(230, 510, 150, 30);

		jPanelEinzelteilAuftragLieferant.setLayout(null);

		jPanelEinzelteilAuftragLieferant.setBorder(new javax.swing.border.TitledBorder("1.) Lieferant"));
		jComboBoxLieferanten.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select:" }));
		jComboBoxLieferanten.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jComboBoxLieferantenActionPerformed(evt);
			}
		});
		jComboBoxLieferanten.addAncestorListener(new javax.swing.event.AncestorListener() {
			public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
			}
			public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
				jComboBoxLieferantenAncestorAdded(evt);
			}
			public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
			}
		});

		jPanelEinzelteilAuftragLieferant.add(jComboBoxLieferanten);
		jComboBoxLieferanten.setBounds(80, 40, 200, 25);

		jLabelLieferqualitaet.setFont(new java.awt.Font("Dialog", 1, 14));
		jLabelLieferqualitaet.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		jLabelLieferqualitaet.setText("Lieferqualit\u00e4t");
		jPanelEinzelteilAuftragLieferant.add(jLabelLieferqualitaet);
		jLabelLieferqualitaet.setBounds(330, 60, 100, 20);

		jTextFieldLieferqualitaet.setEditable(false);
		jTextFieldLieferqualitaet.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
		jPanelEinzelteilAuftragLieferant.add(jTextFieldLieferqualitaet);
		jTextFieldLieferqualitaet.setBounds(440, 60, 70, 20);

		jTextFieldLiefertreue.setEditable(false);
		jTextFieldLiefertreue.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
		jPanelEinzelteilAuftragLieferant.add(jTextFieldLiefertreue);
		jTextFieldLiefertreue.setBounds(640, 60, 60, 20);

		jLabelLiefertreue.setFont(new java.awt.Font("Dialog", 1, 14));
		jLabelLiefertreue.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		jLabelLiefertreue.setText("Liefertreue");
		jPanelEinzelteilAuftragLieferant.add(jLabelLiefertreue);
		jLabelLiefertreue.setBounds(540, 60, 90, 20);

		jLabelFirma.setFont(new java.awt.Font("Dialog", 1, 14));
		jLabelFirma.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		jLabelFirma.setText("Firma");
		jPanelEinzelteilAuftragLieferant.add(jLabelFirma);
		jLabelFirma.setBounds(10, 40, 60, 20);

		jTextFieldAnsprechperson.setEditable(false);
		jTextFieldAnsprechperson.setHorizontalAlignment(javax.swing.JTextField.LEFT);
		jPanelEinzelteilAuftragLieferant.add(jTextFieldAnsprechperson);
		jTextFieldAnsprechperson.setBounds(440, 30, 260, 20);

		jLabelAnsprechperson.setFont(new java.awt.Font("Dialog", 1, 14));
		jLabelAnsprechperson.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		jLabelAnsprechperson.setText("Ansprechperson");
		jPanelEinzelteilAuftragLieferant.add(jLabelAnsprechperson);
		jLabelAnsprechperson.setBounds(290, 30, 140, 20);

		add(jPanelEinzelteilAuftragLieferant);
		jPanelEinzelteilAuftragLieferant.setBounds(20, 30, 750, 100);

		jPanelEinzelteilLieferkonditionen.setLayout(null);

		jPanelEinzelteilLieferkonditionen.setBorder(new javax.swing.border.TitledBorder("3.) Lieferkonditionen"));
		jLabelSkonto.setFont(new java.awt.Font("Dialog", 1, 14));
		jLabelSkonto.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		jLabelSkonto.setText("Skonto");
		jPanelEinzelteilLieferkonditionen.add(jLabelSkonto);
		jLabelSkonto.setBounds(10, 30, 90, 20);

		jTextFieldSkonto.setDocument(new Validator(5));
		jTextFieldSkonto.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
		jTextFieldSkonto.addFocusListener(new java.awt.event.FocusAdapter() {
			public void focusLost(java.awt.event.FocusEvent evt) {
				jTextFieldSkontoFocusLost(evt);
			}
		});

		jPanelEinzelteilLieferkonditionen.add(jTextFieldSkonto);
		jTextFieldSkonto.setBounds(110, 30, 40, 20);

		jLabelProzent2.setFont(new java.awt.Font("Dialog", 1, 14));
		jLabelProzent2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		jLabelProzent2.setText("%");
		jPanelEinzelteilLieferkonditionen.add(jLabelProzent2);
		jLabelProzent2.setBounds(150, 30, 20, 20);

		jLabelSkontofrist.setFont(new java.awt.Font("Dialog", 1, 14));
		jLabelSkontofrist.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		jLabelSkontofrist.setText("Skontofrist");
		jPanelEinzelteilLieferkonditionen.add(jLabelSkontofrist);
		jLabelSkontofrist.setBounds(20, 60, 80, 20);

		jTextFieldSkontofrist.setDocument(new Validator(5));
		jTextFieldSkontofrist.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
		jTextFieldSkontofrist.addFocusListener(new java.awt.event.FocusAdapter() {
			public void focusLost(java.awt.event.FocusEvent evt) {
				jTextFieldSkontofristFocusLost(evt);
			}
		});

		jPanelEinzelteilLieferkonditionen.add(jTextFieldSkontofrist);
		jTextFieldSkontofrist.setBounds(110, 60, 40, 20);

		jLabelTage.setFont(new java.awt.Font("Dialog", 1, 14));
		jLabelTage.setText("Tage");
		jPanelEinzelteilLieferkonditionen.add(jLabelTage);
		jLabelTage.setBounds(160, 60, 34, 20);

		jLabelNettozahldatum.setFont(new java.awt.Font("Dialog", 1, 14));
		jLabelNettozahldatum.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		jLabelNettozahldatum.setText("Nettozahldatum");
		jPanelEinzelteilLieferkonditionen.add(jLabelNettozahldatum);
		jLabelNettozahldatum.setBounds(200, 30, 120, 20);

		jLabelLieferdatum.setFont(new java.awt.Font("Dialog", 1, 14));
		jLabelLieferdatum.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		jLabelLieferdatum.setText("Lieferdatum");
		jPanelEinzelteilLieferkonditionen.add(jLabelLieferdatum);
		jLabelLieferdatum.setBounds(230, 60, 90, 20);

		jTextFieldLieferdatumTag.setDocument(new Validator(2));
		jTextFieldLieferdatumTag.setHorizontalAlignment(javax.swing.JTextField.CENTER);
		jTextFieldLieferdatumTag.addFocusListener(new java.awt.event.FocusAdapter() {
			public void focusLost(java.awt.event.FocusEvent evt) {
				jTextFieldLieferdatumTagFocusLost(evt);
			}
		});

		jPanelEinzelteilLieferkonditionen.add(jTextFieldLieferdatumTag);
		jTextFieldLieferdatumTag.setBounds(330, 60, 30, 20);

		jTextFieldLieferdatumMonat.setDocument(new Validator(2));
		jTextFieldLieferdatumMonat.setHorizontalAlignment(javax.swing.JTextField.CENTER);
		jTextFieldLieferdatumMonat.addFocusListener(new java.awt.event.FocusAdapter() {
			public void focusLost(java.awt.event.FocusEvent evt) {
				jTextFieldLieferdatumMonatFocusLost(evt);
			}
		});

		jPanelEinzelteilLieferkonditionen.add(jTextFieldLieferdatumMonat);
		jTextFieldLieferdatumMonat.setBounds(360, 60, 30, 20);

		jTextFieldLieferdatumJahr.setDocument(new Validator(4));
		jTextFieldLieferdatumJahr.setHorizontalAlignment(javax.swing.JTextField.CENTER);
		jTextFieldLieferdatumJahr.addFocusListener(new java.awt.event.FocusAdapter() {
			public void focusLost(java.awt.event.FocusEvent evt) {
				jTextFieldLieferdatumJahrFocusLost(evt);
			}
		});

		jPanelEinzelteilLieferkonditionen.add(jTextFieldLieferdatumJahr);
		jTextFieldLieferdatumJahr.setBounds(390, 60, 40, 20);

		jLabelLieferrabatt.setFont(new java.awt.Font("Dialog", 1, 14));
		jLabelLieferrabatt.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		jLabelLieferrabatt.setText("Lieferrabatt");
		jPanelEinzelteilLieferkonditionen.add(jLabelLieferrabatt);
		jLabelLieferrabatt.setBounds(10, 90, 90, 20);

		jTextFieldLieferrabatt.setDocument(new Validator(5));
		jTextFieldLieferrabatt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
		jTextFieldLieferrabatt.addFocusListener(new java.awt.event.FocusAdapter() {
			public void focusLost(java.awt.event.FocusEvent evt) {
				jTextFieldLieferrabattFocusLost(evt);
			}
		});

		jPanelEinzelteilLieferkonditionen.add(jTextFieldLieferrabatt);
		jTextFieldLieferrabatt.setBounds(110, 90, 40, 20);

		jLabelProzent.setFont(new java.awt.Font("Dialog", 1, 14));
		jLabelProzent.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		jLabelProzent.setText("%");
		jPanelEinzelteilLieferkonditionen.add(jLabelProzent);
		jLabelProzent.setBounds(150, 90, 20, 20);

		jPanelNettoZahlDatum.setLayout(null);

		jPanelNettoZahlDatum.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
		jLabelNettozahldatumValue.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		jPanelNettoZahlDatum.add(jLabelNettozahldatumValue);
		jLabelNettozahldatumValue.setBounds(0, 0, 100, 20);

		jPanelEinzelteilLieferkonditionen.add(jPanelNettoZahlDatum);
		jPanelNettoZahlDatum.setBounds(330, 30, 100, 20);

		add(jPanelEinzelteilLieferkonditionen);
		jPanelEinzelteilLieferkonditionen.setBounds(20, 380, 450, 120);

		jPanelEinzelteilPositionen.setLayout(null);

		jPanelEinzelteilPositionen.setBorder(new javax.swing.border.TitledBorder("2.) Einzelteile"));
		jLabelArtikel.setFont(new java.awt.Font("Dialog", 1, 14));
		jLabelArtikel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		jLabelArtikel.setText("Artikel");
		jPanelEinzelteilPositionen.add(jLabelArtikel);
		jLabelArtikel.setBounds(40, 40, 70, 20);

		jComboBoxArtikel.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select:" }));
		jComboBoxArtikel.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jComboBoxArtikelActionPerformed(evt);
			}
		});
		jComboBoxArtikel.addAncestorListener(new javax.swing.event.AncestorListener() {
			public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
			}
			public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
				jComboBoxArtikelAncestorAdded(evt);
			}
			public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
			}
		});

		jPanelEinzelteilPositionen.add(jComboBoxArtikel);
		jComboBoxArtikel.setBounds(120, 40, 130, 25);

		jLabelPreis.setFont(new java.awt.Font("Dialog", 1, 14));
		jLabelPreis.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		jLabelPreis.setText("Preis");
		jPanelEinzelteilPositionen.add(jLabelPreis);
		jLabelPreis.setBounds(70, 80, 40, 20);

		jTextFieldPreis.setEditable(false);
		jTextFieldPreis.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
		jPanelEinzelteilPositionen.add(jTextFieldPreis);
		jTextFieldPreis.setBounds(120, 80, 70, 20);

		jLabelMinAbnahme.setFont(new java.awt.Font("Dialog", 1, 14));
		jLabelMinAbnahme.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		jLabelMinAbnahme.setText("Min. Abnahme");
		jPanelEinzelteilPositionen.add(jLabelMinAbnahme);
		jLabelMinAbnahme.setBounds(10, 120, 99, 20);

		jTextFieldMindestAbnahme.setEditable(false);
		jTextFieldMindestAbnahme.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
		jPanelEinzelteilPositionen.add(jTextFieldMindestAbnahme);
		jTextFieldMindestAbnahme.setBounds(120, 120, 70, 20);

		jLabelMenge.setFont(new java.awt.Font("Dialog", 1, 14));
		jLabelMenge.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		jLabelMenge.setText("Menge");
		jPanelEinzelteilPositionen.add(jLabelMenge);
		jLabelMenge.setBounds(10, 160, 99, 20);

		jPanelEinzelteilPositionen.add(jSpinnerMenge);
		jSpinnerMenge.setBounds(120, 160, 70, 24);

		jButtonRemovePosition.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/doubleleft.gif")));
		jButtonRemovePosition.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButtonRemovePositionActionPerformed(evt);
			}
		});

		jPanelEinzelteilPositionen.add(jButtonRemovePosition);
		jButtonRemovePosition.setBounds(270, 110, 81, 30);

		jButtonAddPosition.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/doubleright.gif")));
		jButtonAddPosition.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButtonAddPositionActionPerformed(evt);
			}
		});

		jPanelEinzelteilPositionen.add(jButtonAddPosition);
		jButtonAddPosition.setBounds(270, 70, 81, 30);

		jLabelZwischensumme.setFont(new java.awt.Font("Dialog", 1, 14));
		jLabelZwischensumme.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		jLabelZwischensumme.setText("Zwischensumme");
		jPanelEinzelteilPositionen.add(jLabelZwischensumme);
		jLabelZwischensumme.setBounds(470, 200, 130, 20);

		jTextFieldSumme.setEditable(false);
		jTextFieldSumme.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
		jPanelEinzelteilPositionen.add(jTextFieldSumme);
		jTextFieldSumme.setBounds(610, 200, 100, 20);

		jTablePositionen.setModel(new javax.swing.table.DefaultTableModel(new Object[][] {
		}, new String[] { "Artikel", "Menge", "Preis" }) {
			boolean[] canEdit = new boolean[] { false, false, false };

			public boolean isCellEditable(int rowIndex, int columnIndex) {
				return canEdit[columnIndex];
			}
		});
		jTablePositionen.addFocusListener(new java.awt.event.FocusAdapter() {
			public void focusLost(java.awt.event.FocusEvent evt) {
				jTablePositionenFocusLost(evt);
			}
		});

		jScrollPanePositionen.setViewportView(jTablePositionen);

		jPanelEinzelteilPositionen.add(jScrollPanePositionen);
		jScrollPanePositionen.setBounds(370, 40, 360, 150);

		jLabelPositionen.setText("Positionen");
		jPanelEinzelteilPositionen.add(jLabelPositionen);
		jLabelPositionen.setBounds(370, 20, 70, 16);

		jLabelEuro2.setFont(new java.awt.Font("Dialog", 1, 14));
		jLabelEuro2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		jLabelEuro2.setText("\u20ac");
		jPanelEinzelteilPositionen.add(jLabelEuro2);
		jLabelEuro2.setBounds(190, 80, 20, 19);

		jLabelEuro.setFont(new java.awt.Font("Dialog", 1, 14));
		jLabelEuro.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		jLabelEuro.setText("\u20ac");
		jPanelEinzelteilPositionen.add(jLabelEuro);
		jLabelEuro.setBounds(710, 200, 20, 19);

		jLabelStk.setFont(new java.awt.Font("Dialog", 1, 14));
		jLabelStk.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		jLabelStk.setText("Stk.");
		jPanelEinzelteilPositionen.add(jLabelStk);
		jLabelStk.setBounds(190, 120, 40, 19);

		add(jPanelEinzelteilPositionen);
		jPanelEinzelteilPositionen.setBounds(20, 140, 750, 230);

		jButtonLoeschen.setFont(new java.awt.Font("Dialog", 1, 18));
		jButtonLoeschen.setText("L\u00f6schen");
		jButtonLoeschen.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButtonLoeschenActionPerformed(evt);
			}
		});

		add(jButtonLoeschen);
		jButtonLoeschen.setBounds(390, 510, 150, 30);

		jPanelGesamt.setLayout(null);

		jPanelGesamt.setBorder(new javax.swing.border.TitledBorder("4.) Gesamt"));
		jLabelAbzLieferrabatt.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		jLabelAbzLieferrabatt.setText("abz. Lieferrabatt");
		jPanelGesamt.add(jLabelAbzLieferrabatt);
		jLabelAbzLieferrabatt.setBounds(20, 30, 100, 16);

		jLabelAbzSkonto.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		jLabelAbzSkonto.setText("abz. Skonto");
		jPanelGesamt.add(jLabelAbzSkonto);
		jLabelAbzSkonto.setBounds(50, 60, 70, 16);

		jTextFieldCalcLieferrabatt.setEditable(false);
		jTextFieldCalcLieferrabatt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
		jPanelGesamt.add(jTextFieldCalcLieferrabatt);
		jTextFieldCalcLieferrabatt.setBounds(130, 30, 100, 20);

		jTextFieldCalcSkonto.setEditable(false);
		jTextFieldCalcSkonto.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
		jPanelGesamt.add(jTextFieldCalcSkonto);
		jTextFieldCalcSkonto.setBounds(130, 60, 100, 20);

		jLabelGesamt.setFont(new java.awt.Font("Dialog", 1, 14));
		jLabelGesamt.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		jLabelGesamt.setText("Gesamt");
		jPanelGesamt.add(jLabelGesamt);
		jLabelGesamt.setBounds(50, 90, 70, 19);

		jTextFieldCalcGesamt.setEditable(false);
		jTextFieldCalcGesamt.setFont(new java.awt.Font("Dialog", 1, 12));
		jTextFieldCalcGesamt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
		jPanelGesamt.add(jTextFieldCalcGesamt);
		jTextFieldCalcGesamt.setBounds(130, 90, 100, 20);

		jLabelEuro3.setFont(new java.awt.Font("Dialog", 1, 14));
		jLabelEuro3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		jLabelEuro3.setText("\u20ac");
		jPanelGesamt.add(jLabelEuro3);
		jLabelEuro3.setBounds(230, 30, 20, 20);

		jLabelEuro4.setFont(new java.awt.Font("Dialog", 1, 14));
		jLabelEuro4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		jLabelEuro4.setText("\u20ac");
		jPanelGesamt.add(jLabelEuro4);
		jLabelEuro4.setBounds(230, 60, 20, 20);

		jLabelEuro5.setFont(new java.awt.Font("Dialog", 1, 14));
		jLabelEuro5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		jLabelEuro5.setText("\u20ac");
		jPanelGesamt.add(jLabelEuro5);
		jLabelEuro5.setBounds(230, 90, 20, 20);

		add(jPanelGesamt);
		jPanelGesamt.setBounds(500, 380, 270, 120);

	}//GEN-END:initComponents

	private void formAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_formAncestorAdded
          clearFields();
	}//GEN-LAST:event_formAncestorAdded

	private void jButtonLoeschenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLÔøΩschenActionPerformed
          clearFields();
	}//GEN-LAST:event_jButtonLÔøΩschenActionPerformed

	private void jTextFieldLieferrabattFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldLieferrabattFocusLost
          validateSupplierDiscount();
	}//GEN-LAST:event_jTextFieldLieferrabattFocusLost

	private void jButtonBestellungAbschickenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBestellungAbschickenActionPerformed
          saveOrder();
	}//GEN-LAST:event_jButtonBestellungAbschickenActionPerformed

	private void jTextFieldLieferdatumJahrFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldLieferdatumJahrFocusLost
          validateDateYear();
	}//GEN-LAST:event_jTextFieldLieferdatumJahrFocusLost

	private void jTextFieldLieferdatumMonatFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldLieferdatumMonatFocusLost
          validateDateMonth();
	}//GEN-LAST:event_jTextFieldLieferdatumMonatFocusLost

	private void jTextFieldLieferdatumTagFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldLieferdatumTagFocusLost
          validateDateDay();
	}//GEN-LAST:event_jTextFieldLieferdatumTagFocusLost

	private void jTextFieldSkontofristFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldSkontofristFocusLost
          validateCashDiscountLimit();
	}//GEN-LAST:event_jTextFieldSkontofristFocusLost

	private void jTextFieldSkontoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldSkontoFocusLost
          validateCashDiscount();
	}//GEN-LAST:event_jTextFieldSkontoFocusLost

	private void jTablePositionenFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTablePositionenFocusLost
          jTablePositionen.clearSelection();
	}//GEN-LAST:event_jTablePositionenFocusLost

	private void jButtonRemovePositionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRemovePositionActionPerformed
          removePosition();
	}//GEN-LAST:event_jButtonRemovePositionActionPerformed

	private void jButtonAddPositionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddPositionActionPerformed
          addPosition();
	}//GEN-LAST:event_jButtonAddPositionActionPerformed

	private void jComboBoxArtikelAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_jComboBoxArtikelAncestorAdded
          if (jComboBoxArtikel.getItemAt(1) != null) {
            jComboBoxArtikel.removeAllItems();
            jComboBoxArtikel.addItem(colArtikel.get(0));
          }
	}//GEN-LAST:event_jComboBoxArtikelAncestorAdded

	private void jComboBoxArtikelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxArtikelActionPerformed
          getArticleInfo();
	}//GEN-LAST:event_jComboBoxArtikelActionPerformed

	private void jComboBoxLieferantenAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_jComboBoxLieferantenAncestorAdded
          getSuppliers();
	}//GEN-LAST:event_jComboBoxLieferantenAncestorAdded

	private void jComboBoxLieferantenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxLieferantenActionPerformed
          getArticle();
	}//GEN-LAST:event_jComboBoxLieferantenActionPerformed

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JButton jButtonAddPosition;
	private javax.swing.JButton jButtonBestellungAbschicken;
	private javax.swing.JButton jButtonLoeschen;
	private javax.swing.JButton jButtonRemovePosition;
	private javax.swing.JComboBox jComboBoxArtikel;
	private javax.swing.JComboBox jComboBoxLieferanten;
	private javax.swing.JLabel jLabelAbzLieferrabatt;
	private javax.swing.JLabel jLabelAbzSkonto;
	private javax.swing.JLabel jLabelAnsprechperson;
	private javax.swing.JLabel jLabelArtikel;
	private javax.swing.JLabel jLabelEuro;
	private javax.swing.JLabel jLabelEuro2;
	private javax.swing.JLabel jLabelEuro3;
	private javax.swing.JLabel jLabelEuro4;
	private javax.swing.JLabel jLabelEuro5;
	private javax.swing.JLabel jLabelFirma;
	private javax.swing.JLabel jLabelGesamt;
	private javax.swing.JLabel jLabelLieferdatum;
	private javax.swing.JLabel jLabelLieferqualitaet;
	private javax.swing.JLabel jLabelLieferrabatt;
	private javax.swing.JLabel jLabelLiefertreue;
	private javax.swing.JLabel jLabelMenge;
	private javax.swing.JLabel jLabelMinAbnahme;
	private javax.swing.JLabel jLabelNettozahldatum;
	private javax.swing.JLabel jLabelNettozahldatumValue;
	private javax.swing.JLabel jLabelPositionen;
	private javax.swing.JLabel jLabelPreis;
	private javax.swing.JLabel jLabelProzent;
	private javax.swing.JLabel jLabelProzent2;
	private javax.swing.JLabel jLabelSkonto;
	private javax.swing.JLabel jLabelSkontofrist;
	private javax.swing.JLabel jLabelStk;
	private javax.swing.JLabel jLabelTage;
	private javax.swing.JLabel jLabelUeberschriftBestellung;
	private javax.swing.JLabel jLabelZwischensumme;
	private javax.swing.JOptionPane jOptionAlert;
	private javax.swing.JOptionPane jOptionPaneConfirm;
	private javax.swing.JPanel jPanelEinzelteilAuftragLieferant;
	private javax.swing.JPanel jPanelEinzelteilLieferkonditionen;
	private javax.swing.JPanel jPanelEinzelteilPositionen;
	private javax.swing.JPanel jPanelGesamt;
	private javax.swing.JPanel jPanelNettoZahlDatum;
	private javax.swing.JScrollPane jScrollPanePositionen;
	private javax.swing.JSpinner jSpinnerMenge;
	private javax.swing.JTable jTablePositionen;
	private javax.swing.JTextField jTextFieldAnsprechperson;
	private javax.swing.JTextField jTextFieldCalcGesamt;
	private javax.swing.JTextField jTextFieldCalcLieferrabatt;
	private javax.swing.JTextField jTextFieldCalcSkonto;
	private javax.swing.JTextField jTextFieldLieferdatumJahr;
	private javax.swing.JTextField jTextFieldLieferdatumMonat;
	private javax.swing.JTextField jTextFieldLieferdatumTag;
	private javax.swing.JTextField jTextFieldLieferqualitaet;
	private javax.swing.JTextField jTextFieldLieferrabatt;
	private javax.swing.JTextField jTextFieldLiefertreue;
	private javax.swing.JTextField jTextFieldMindestAbnahme;
	private javax.swing.JTextField jTextFieldPreis;
	private javax.swing.JTextField jTextFieldSkonto;
	private javax.swing.JTextField jTextFieldSkontofrist;
	private javax.swing.JTextField jTextFieldSumme;
	// End of variables declaration//GEN-END:variables

  /**
   * Updatet die Summe der Preise aller Positionen.
   */
  private void setSumme() {
    summe = 0;
    int i = 0;
    while (i < position) {
      try {
        summe = summe + format.parse(jTablePositionen.getValueAt(i, 2).toString()).doubleValue();
      } catch (ParseException e) {
        wiSimLogger.log(Level.WARNING, "JPanelNewOrder.getSumme", e, false);
      }
      i++;
    }
    jTextFieldSumme.setText(format.format(summe));
  }

  /**
   * √úberpr√ºft alle Pflichtfelder auf Inhalt. Gibt eine Fehlemeldung an den
   * Benutzer, falls ein oder mehrere Felder leer gelassen wurden.
   *
   * @return false: Es wurden nicht alle Felder gef√ºllt. true: Alle
   * Pflichtfelder sind gef√ºllt.
   */
  private boolean checkAllFields() {
    ArrayList<String> pflichtfelder = new ArrayList<>();
    if (jTextFieldSkonto.getText().equals("")) {
      pflichtfelder.add("Skonto");
    }

    if (jTextFieldSkontofrist.getText().equals("")) {
      pflichtfelder.add("Skontofrist");
    }

    if (jTextFieldLieferrabatt.getText().equals("")) {
      pflichtfelder.add("Lieferrabatt");
    }

    if (jTextFieldLieferdatumTag.getText().equals("") || jTextFieldLieferdatumMonat.getText().equals("") || jTextFieldLieferdatumJahr.getText().equals("")) {
      pflichtfelder.add("Lieferdatum");
    }

    if (positionen.isEmpty()) {
      pflichtfelder.add("Article");
    }

    /*Wurde ein oder mehrere Pflichtfelder nicht ausgef√ºllt erscheint ein JOptionPane, dass dem
		 *Benutzer die fehlenden noch leeren Felder anzeigt*/
    if (!pflichtfelder.isEmpty()) {
      if (pflichtfelder.size() > 1) {
        JOptionPane.showMessageDialog(this, "Folgende Felder m√ºssen ausgef√ºllt werden: " + pflichtfelder.toString().substring(1, pflichtfelder.toString().length() - 1), "Fehler beim Anlegen des neuen Kunden", JOptionPane.ERROR_MESSAGE);
      } else {
        JOptionPane.showMessageDialog(this, "Das folgende Feld muss ausgef√ºllt werden: " + pflichtfelder.toString().substring(1, pflichtfelder.toString().length() - 1), "Fehler beim Anlegen des neuen Kunden", JOptionPane.ERROR_MESSAGE);
      }

      return false;
    }
    return true;
  }

  /**
   * √úberpr√ºft das eingegebene Datum
   *
   * @return Gibt das Lieferdatum als GregorianDate zur√ºck. Oder NULL, wenn das
   * Datum ung√ºltig ist.
   */
  private GregorianCalendar checkDate() {
    int lieferTag = Integer.parseInt(jTextFieldLieferdatumTag.getText());
    int lieferMonat = Integer.parseInt(jTextFieldLieferdatumMonat.getText()) - 1;
    int lieferJahr = Integer.parseInt(jTextFieldLieferdatumJahr.getText());

    GregorianCalendar lieferDatum = new GregorianCalendar(lieferJahr, lieferMonat, lieferTag);

    if (lieferTag != lieferDatum.get(Calendar.DATE)) {
      JOptionPane.showMessageDialog(this, "Ung√ºltiges Lieferdatum!", "Fehler", 0);
      return null;
    }

    if (lieferDatum.getTime().before(wiSimMainController.getActDate())) {
      JOptionPane.showMessageDialog(this, "Lieferdatum liegt in der Vergangenheit!", "Fehler", 0);
      return null;
    }

    return lieferDatum;
  }

  /**
   * Schreibt die Positions-Tabelle neu.
   *
   * @param Deleted true: Eine Zeile muss gel√∂scht werden. false: Eine Zeile
   * muss hinzugef√ºgt werden.
   */
  private void updatePositionsTable(boolean Deleted) {
    int rows;
    if (Deleted == true) {
      rows = position;
    } else {
      rows = position + 1;
    }

    //DefaultTableModel mit Variablen Zeilen, 3 TableHeads und nicht editierbaren Zellen
    Object[][] tableInit = new Object[rows][3];
    DefaultTableModel defTable = new DefaultTableModel(tableInit, new String[]{"Article", "Menge", "Preis"}) {
      boolean[] canEdit = new boolean[]{false, false, false};

      public boolean isCellEditable(int rowIndex, int columnIndex) {
        return canEdit[columnIndex];
      }
    };
    jTablePositionen.setModel(defTable);
    jTablePositionen.setFocusable(false);
    jTablePositionen.getTableHeader().setReorderingAllowed(false);

  }

  /**
   * L√∂scht alle Felder.
   */
  private void clearFields() {
    jTextFieldSkonto.setText("");
    jTextFieldSkontofrist.setText("");
    jTextFieldLieferrabatt.setText("");
    jTextFieldLieferdatumTag.setText("");
    jTextFieldLieferdatumMonat.setText("");
    jTextFieldLieferdatumJahr.setText("");
    jLabelNettozahldatumValue.setText("");
    jTextFieldCalcLieferrabatt.setText("");
    jTextFieldCalcSkonto.setText("");
    jTextFieldCalcGesamt.setText("");

    position = 0;
    skontoToCalc = 0;
    lieferrabattToCalc = 0;
    boolean Deleted = true;
    updatePositionsTable(Deleted);
    setSumme();

    jComboBoxLieferanten.setSelectedIndex(0);
  }

  /**
   * Berechnet Skonto, Lieferrabatt und Gesamtsumme aus dem ComponentContract.
   */
  private void calculateSum() {
    double calcedLieferrabatt = 0;
    double calcedSkonto = 0;
    double calcedGesamt = 0;

    calcedLieferrabatt = summe / 100 * lieferrabattToCalc;
    calcedSkonto = (summe - calcedLieferrabatt) / 100 * skontoToCalc;
    calcedGesamt = summe - calcedSkonto - calcedLieferrabatt;

    jTextFieldCalcLieferrabatt.setText(format.format(Math.rint(calcedLieferrabatt * 100) / 100.));
    jTextFieldCalcSkonto.setText(format.format(Math.rint(calcedSkonto * 100) / 100.));
    jTextFieldCalcGesamt.setText(format.format(Math.rint(calcedGesamt * 100) / 100.));
  }

  /**
   * Validiert das Eingabefeld Lieferrabatt
   */
  private void validateSupplierDiscount() {
    String lieferrabatt = jTextFieldLieferrabatt.getText();

    boolean lieferrabattOk = false;
    if (!lieferrabatt.equals("") && lieferrabatt != null) {
      //So lange der User keine richtige Eingabe gemacht hat und nicht auf Abbrechen geklickt hat
      while (!lieferrabattOk && lieferrabatt != null) {
        /*Erlaubt sind nur Eingaben von 1- oder 2-stellige Zahlen mit 1 Nachkommastelle
				 getrennt durch einen Punkt*/
        if (!validate.checkPercent(lieferrabatt)) {
          jOptionPaneConfirm.setWantsInput(true);
          lieferrabatt = JOptionPane.showInputDialog(this, "Ung√ºltiger Lieferrabatt (Format: xx.xx)! Bitte neu eingeben:", lieferrabatt);

        } else {
          lieferrabattOk = true;
        }
      }
      if (lieferrabatt != null) {
        jTextFieldLieferrabatt.setText(lieferrabatt);

        if (lieferrabatt.matches("^[0-9]*[,][0-9]*")) {
          lieferrabatt = lieferrabatt.replaceAll(",", ".");
        }

        lieferrabattToCalc = Double.parseDouble(lieferrabatt);

      } else {
        jTextFieldLieferrabatt.setText("");
        lieferrabattToCalc = 0;
      }
    } else {
      lieferrabattToCalc = 0;
    }
    calculateSum();
  }

  /**
   * Schreibt die Bestellung in die Datenbank
   */
  private void saveOrder() {
    //Bestellung wird aufgenommen
    //---------------------------

    //Test der Pflichtfelder
    if (checkAllFields() != true) {
      return;
    }

    //Validierung des Datums
    GregorianCalendar lieferDatum = checkDate();
    if (lieferDatum == null) {
      return;
    }

    java.sql.Date lieferDateSQL = new java.sql.Date(lieferDatum.getTimeInMillis());

    //Einzelteilauftrag
    ComponentContract etat = new ComponentContract();
    Supplier lieferant = (Supplier) colLt.get(jComboBoxLieferanten.getSelectedIndex());

    etat.setAuftragsdatum(new java.sql.Date(wiSimMainController.getActDate().getTime()));
    etat.setLieferantNr(lieferant.getId());
    etat.setLieferdatum(lieferDateSQL);
    String lieferrabatt = jTextFieldLieferrabatt.getText();
    if (lieferrabatt.matches("^[0-9]*[,][0-9]*")) {
      lieferrabatt = lieferrabatt.replaceAll(",", ".");
    }
    etat.setLieferrabatt(Float.parseFloat(lieferrabatt));
    String skonto = jTextFieldSkonto.getText();
    if (skonto.matches("^[0-9]*[,][0-9]*")) {
      skonto = skonto.replaceAll(",", ".");
    }
    etat.setSkonto(Float.parseFloat(skonto));
    etat.setSkontofrist(Integer.valueOf(jTextFieldSkontofrist.getText()).intValue());
    etat.setEinzelteilauftragPositionen(einzelteile);

    int etatNr = -1;
    try {
      etatNr = dao.setEinzelteilauftrag(etat);
    } catch (WiSimDAOException e) {
      wiSimLogger.log("etatBestellen()", e);
    } catch (WiSimDAOWriteException e) {
      wiSimLogger.log("etatBestellen()", e);
    }

    etat.setNr(etatNr);
    etat.setEinzelteilAuftragsRechnungNr(etatNr);

    //Einzelteilauftragsrechnung
    ComponentContractInvoice etatr = new ComponentContractInvoice();
    etatr.setBetrag(summe);

    //MwSt-Satz bestimmen
    float mwst = -1;
    try {
      mwst = dao.getMwSt();
    } catch (WiSimDAOException e) {
      wiSimLogger.log("etatBestellen()", e);
    }

    etatr.setMwSt(mwst);
    etatr.setEinzelteilauftragNr(etat.getNr());
    etatr.setNr(etat.getEinzelteilAuftragsRechnungNr());

    //EinzelteilauftragPosition
    etat.setEinzelteilauftragPositionen(einzelteile);

    try {
      dao.setEinzelteilauftragsrechnung(etatr);
    } catch (WiSimDAOException e) {
      wiSimLogger.log("etatBestellen()", e);
    } catch (WiSimDAOWriteException e) {
      wiSimLogger.log("etatBestellen()", e);
    }
    clearFields();
    JOptionPane.showMessageDialog(this, "Die Bestellung wurde erfolgreich gespeichert.", "Bestellung", JOptionPane.INFORMATION_MESSAGE);
  }

  /**
   * Validiert das Eingabefeld Lieferdatum (Jahr)
   */
  private void validateDateYear() {
    String lieferdatum = jTextFieldLieferdatumJahr.getText();
    boolean lieferdatumOk = false;
    if (!lieferdatum.equals("") && lieferdatum != null) {
      //So lange der User keine richtige Eingabe gemacht hat und nicht auf Abbrechen geklickt hat
      while (!lieferdatumOk && lieferdatum != null) {
        /*Erlaubt sind nur Eingaben von 4-stelligen Zahlen die nicht mit 0 beginnen*/
        if (!validate.checkYear(lieferdatum)) {
          jOptionPaneConfirm.setWantsInput(true);
          lieferdatum = JOptionPane.showInputDialog(this, "Ung√ºltiger Jahr! Bitte neu eingeben:", lieferdatum);
        } else {
          lieferdatumOk = true;
        }
      }
      if (lieferdatum != null) {
        jTextFieldLieferdatumJahr.setText(lieferdatum);
      } else {
        jTextFieldLieferdatumJahr.setText("");
      }
    }
  }

  /**
   * Validiert das Eingabefeld Lieferdatum (Monat)
   */
  private void validateDateMonth() {
    String lieferdatum = jTextFieldLieferdatumMonat.getText();
    boolean lieferdatumOk = false;
    if (!lieferdatum.equals("") && lieferdatum != null) {
      //So lange der User keine richtige Eingabe gemacht hat und nicht auf Abbrechen geklickt hat
      while (!lieferdatumOk && lieferdatum != null) {
        //Erlaubt sind nur Eingaben von 1- oder 2-stellige Zahlen || Monatsangabe darf nicht gr√∂√üer 12 sein
        if (!validate.checkTwoDigits(lieferdatum) || Integer.parseInt(lieferdatum) > 12) {
          jOptionPaneConfirm.setWantsInput(true);
          lieferdatum = JOptionPane.showInputDialog(this, "Ung√ºltiger Monat! Bitte neu eingeben:", lieferdatum);
        } else {
          lieferdatumOk = true;
        }
      }
      if (lieferdatum != null) {
        jTextFieldLieferdatumMonat.setText(lieferdatum);
      } else {
        jTextFieldLieferdatumMonat.setText("");
      }
    }
  }

  /**
   * Validiert das Eingabefeld Lieferdatum (Tag)
   */
  private void validateDateDay() {
    String lieferdatum = jTextFieldLieferdatumTag.getText();
    boolean lieferdatumOk = false;
    if (!lieferdatum.equals("") && lieferdatum != null) {
      //So lange der User keine richtige Eingabe gemacht hat und nicht auf Abbrechen geklickt hat
      while (!lieferdatumOk && lieferdatum != null) {
        //Erlaubt sind nur Eingaben von 1- oder 2-stellige Zahlen
        if (!validate.checkTwoDigits(lieferdatum) || Integer.parseInt(lieferdatum) > 31) {
          jOptionPaneConfirm.setWantsInput(true);
          lieferdatum = JOptionPane.showInputDialog(this, "Ung√ºltiger Tag! Bitte neu eingeben:", lieferdatum);
        } else {
          lieferdatumOk = true;
        }
      }
      if (lieferdatum != null) {
        jTextFieldLieferdatumTag.setText(lieferdatum);
      } else {
        jTextFieldLieferdatumTag.setText("");
      }
    }
  }

  /**
   * Validiert das Eingabefeld Skontofrist
   */
  private void validateCashDiscountLimit() {
    String skontofrist = jTextFieldSkontofrist.getText();
    boolean skontofristOk = false;
    if (!skontofrist.equals("") && skontofrist != null) {
      //So lange der User keine richtige Eingabe gemacht hat und nicht auf Abbrechen geklickt hat
      while (!skontofristOk && skontofrist != null) {
        //Erlaubt sind nur Eingaben von Zahlen
        if (!validate.checkZahl(skontofrist)) {
          jOptionPaneConfirm.setWantsInput(true);
          skontofrist = JOptionPane.showInputDialog(this, "Ung√ºltige Skontofrist! Bitte neu eingeben:", skontofrist);
        } else {
          skontofristOk = true;
        }
      }
      if (skontofrist != null) {
        jTextFieldSkontofrist.setText(skontofrist);
      } else {
        jTextFieldSkontofrist.setText("");
      }
    }

    //Das Nettozahldatum wird erzeugt
    if (!jTextFieldSkontofrist.getText().equals("")) {
      long nettoDatumMili = wiSimMainController.getActDate().getTime() + (Long.parseLong(jTextFieldSkontofrist.getText()) * 1000 * 60 * 60 * 24);
      GregorianCalendar nettoDatum = new GregorianCalendar();
      nettoDatum.setTimeInMillis(nettoDatumMili);

      String Tag = String.valueOf(nettoDatum.get(Calendar.DATE));
      String Monat = String.valueOf(nettoDatum.get(Calendar.MONTH) + 1);
      String Jahr = String.valueOf(nettoDatum.get(Calendar.YEAR));
      jLabelNettozahldatumValue.setText(Tag + "." + Monat + "." + Jahr);
    } else {
      jLabelNettozahldatumValue.setText("");
    }
  }

  /**
   * Validiert das Eingabefeld Skonto
   */
  private void validateCashDiscount() {
    String skonto = jTextFieldSkonto.getText();

    boolean skontoOk = false;
    if (!skonto.equals("") && skonto != null) {
      //So lange der User keine richtige Eingabe gemacht hat und nicht auf Abbrechen geklickt hat
      while (!skontoOk && skonto != null) {
        /*Erlaubt sind nur Eingaben von 1- oder 2-stellige Zahlen mit 1 Nachkommastelle
				 getrennt durch einen Punkt*/
        if (!validate.checkPercent(skonto)) {
          jOptionPaneConfirm.setWantsInput(true);
          skonto = JOptionPane.showInputDialog(this, "Ung√ºltiger Skonto-Wert (Format: xx.xx)! Bitte neu eingeben:", skonto);
        } else {
          skontoOk = true;
        }
      }
      if (skonto != null) {
        jTextFieldSkonto.setText(skonto);
        if (skonto.matches("^[0-9]*[,][0-9]*")) {
          skonto = skonto.replaceAll(",", ".");
        }
        skontoToCalc = Double.parseDouble(skonto);
      } else {
        jTextFieldSkonto.setText("");
        skontoToCalc = 0;
      }
    } else {
      skontoToCalc = 0;
    }
    calculateSum();
  }

  /**
   * L√∂scht eine Position aus der Tabelle
   */
  private void removePosition() {
    int SelectedPosition = jTablePositionen.getSelectedRow();

    //gesamter Tabelleninhalt wird Zwischengespeichert
    Vector tableTempRow = new Vector();
    int row = 0;
    while (row < position) {
      tableTempRow.add(jTablePositionen.getValueAt(row, 0) + "," + jTablePositionen.getValueAt(row, 1) + "," + jTablePositionen.getValueAt(row, 2));
      row++;
    }

    //Selektierte Zeile wird gel√∂scht
    if (SelectedPosition >= 0) {
      if (jTablePositionen.getValueAt(SelectedPosition, 0) != null) {
        jTablePositionen.setValueAt(null, SelectedPosition, 0);
        jTablePositionen.setValueAt(null, SelectedPosition, 1);
        jTablePositionen.setValueAt(null, SelectedPosition, 2);
        tableTempRow.remove(SelectedPosition);

        //Position entfernen:
        positionen.remove(jTablePositionen.getSelectedRow());
        einzelteile.remove(jTablePositionen.getSelectedRow());
        position--;
      }
    }

    //DefaultTableModel mit Variablen Zeilen, 3 TableHeads und nicht editierbaren Zellen
    boolean Deleted = true;
    updatePositionsTable(Deleted);

    //Tabelle wird neu geschrieben
    if (tableTempRow.size() > 0) {
      Iterator it_tableTempRow = tableTempRow.iterator();
      row = 0;
      while (it_tableTempRow.hasNext()) {
        String complete = (String) it_tableTempRow.next();
        String[] chunks = complete.split(",");
        jTablePositionen.setValueAt(chunks[0], row, 0);
        jTablePositionen.setValueAt(chunks[1], row, 1);
        jTablePositionen.setValueAt(chunks[2], row, 2);
        row++;
      }
    }
    position = tableTempRow.size();

    if (position != 0) {
      jTablePositionen.setRowSelectionInterval(position - 1, position - 1);
    }

    //Summe wird neu berechnet
    setSumme();
    calculateSum();
  }

  /**
   * F√ºgt eine Position in die Tabelle ein
   */
  private void addPosition() {
    String artikel = jComboBoxArtikel.getSelectedItem().toString();

    if (!artikel.equals("Select:")) {
      String menge = String.valueOf(jSpinnerMenge.getValue());
      menge = menge.substring(0, (menge.length() - 2));
      String preis = "";
      try {
        preis = format.format(format.parse(jTextFieldPreis.getText()).floatValue() * Float.parseFloat(menge));
      } catch (ParseException e) {
        wiSimLogger.log(Level.WARNING, "JPanelNewOrder.addPosition", e, false);
      }

      //gesamter Tabelleninhalt wird Zwischengespeichert
      Vector tableTempRow = new Vector();
      int row = 0;
      while (row < position) {
        tableTempRow.add(jTablePositionen.getValueAt(row, 0) + "," + jTablePositionen.getValueAt(row, 1) + "," + jTablePositionen.getValueAt(row, 2));
        row++;
      }

      if (!positionen.contains(colArtikel.get(jComboBoxArtikel.getSelectedIndex()))) {

        //Position hinzuf√ºgen:
        ComponentContractItem etatPos = new ComponentContractItem();
        etatPos.setBestellmenge(Integer.parseInt(menge));
        SupplyList art = (SupplyList) colArtikel.get(jComboBoxArtikel.getSelectedIndex());

        etatPos.setEtNr(art.getEinzelteilID());
        etatPos.setPreis(art.getPreis());
        einzelteile.add(etatPos);

        positionen.add(colArtikel.get(jComboBoxArtikel.getSelectedIndex()));

        //DefaultTableModel mit Variablen Zeilen, 3 TableHeads und nicht editierbaren Zellen
        boolean Deleted = false;
        updatePositionsTable(Deleted);

        //Tabelle wird neu geschrieben
        if (tableTempRow.size() > 0) {
          Iterator it_tableTempRow = tableTempRow.iterator();
          row = 0;
          while (it_tableTempRow.hasNext()) {
            String complete = (String) it_tableTempRow.next();
            String[] chunks = complete.split(",");
            jTablePositionen.setValueAt(chunks[0], row, 0);
            jTablePositionen.setValueAt(chunks[1], row, 1);
            jTablePositionen.setValueAt(chunks[2], row, 2);
            row++;
          }
        }

        jTablePositionen.setValueAt(artikel, position, 0);
        jTablePositionen.setValueAt(menge, position, 1);
        jTablePositionen.setValueAt(preis, position, 2);
        position++;

        jTablePositionen.setRowSelectionInterval(position - 1, position - 1);
        setSumme();
      } else {
        JOptionPane.showMessageDialog(null, "Dieser Article ist bereits in der Liste!");
      }
    }
    calculateSum();
  }

  /**
   * Holt Infos √ºber den selektierten Article aus der DB
   */
  private void getArticleInfo() {
    /**
     * [DoItBen] change action!
     */
    if (jComboBoxArtikel.getSelectedItem() != null) {
      if (jComboBoxArtikel.getSelectedItem().toString().equals("Select:")) {
        jTextFieldPreis.setText("");
        SpinnerNumberModel spin = new SpinnerNumberModel(0, 0, 0, 0);
        jSpinnerMenge.setModel(spin);
        jTextFieldMindestAbnahme.setText("");
      } else {
        SupplyList lieferliste = (SupplyList) colArtikel.get(jComboBoxArtikel.getSelectedIndex());
        jTextFieldPreis.setText(format.format(lieferliste.getPreis()));
        jTextFieldMindestAbnahme.setText(String.valueOf(lieferliste.getMindestBestellMenge()));
        SpinnerNumberModel spin = new SpinnerNumberModel(lieferliste.getMindestBestellMenge(), lieferliste.getMindestBestellMenge(), 999999, 1);
        jSpinnerMenge.setModel(spin);
      }
    }
  }

  /**
   * Holt alle Lieferanten aus der DB
   */
  private void getSuppliers() {
    if (jComboBoxLieferanten.getItemAt(1) != null) {
      jComboBoxLieferanten.removeAllItems();
      jComboBoxLieferanten.addItem(colLt.get(0));
      setSumme();
    }

    setSumme();
    try {
      Collection<Supplier> suppliers = dao.getSuppliers();
      
      colLt.removeAllElements();
      colLt.add("Select:");

      for (Supplier supplier : suppliers) {
        String item = supplier.getFirma() + " (#" + supplier.getId() + ")";
        jComboBoxLieferanten.addItem(item);
        colLt.add(supplier);
      }
    } catch (WiSimDAOException e) {
      wiSimLogger.log("getLieferanten()", e);
    }
  }

  /**
   * Holt alle Article des Lieferanten aus der DB
   */
  private void getArticle() {
    //Tabelle wiederherstellen
    DefaultTableModel defTable = new DefaultTableModel(0, 3);
    Vector<String> tableHeader = new Vector();
    tableHeader.add("Artikel");
    tableHeader.add("Menge");
    tableHeader.add("Preis");
    defTable.setColumnIdentifiers(tableHeader);
    jTablePositionen.setModel(defTable);
    position = 0;
    setSumme();

    //Positionen l√∂schen
    positionen.removeAllElements();
    einzelteile.clear();
    colArtikel.removeAllElements();
    colArtikel.add("Select:");

    /**
     * [DoItBen] change action!
     */
    if (jComboBoxLieferanten.getSelectedItem() != null) {
      if (jComboBoxLieferanten.getSelectedItem().toString().equals("Select:")) {
        jTextFieldLieferqualitaet.setText("");
        jTextFieldLiefertreue.setText("");
        jTextFieldAnsprechperson.setText("");
        jComboBoxArtikel.removeAllItems();
        jComboBoxArtikel.addItem("Select:");
      } else {
        Supplier lieferant = (Supplier) colLt.get(jComboBoxLieferanten.getSelectedIndex());
        jTextFieldLieferqualitaet.setText(lieferant.getLieferqualitaet());
        jTextFieldLiefertreue.setText(lieferant.getZuverlaessigkeit());
        jTextFieldAnsprechperson.setText(lieferant.getVorname() + " " + lieferant.getNachname());

        //Article
        try {
          if (jComboBoxArtikel.getItemAt(1) != null) {
            jComboBoxArtikel.removeAllItems();
            jComboBoxArtikel.addItem("Select:");
          }

          Collection<SupplyList> lieferlisten = dao.getSupplyLists(lieferant.getId());
          for (SupplyList lieferliste:lieferlisten) {
            WiSimComponent einzelteil = dao.getComponent(lieferliste.getEinzelteilID());
            jComboBoxArtikel.addItem(einzelteil.getName());
            colArtikel.add(lieferliste);
          }
        } catch (WiSimDAOException e) {
          wiSimLogger.log("getArtikel()", e);
        }
      }
    }
  }
}
